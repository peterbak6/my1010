{"ast":null,"code":"import * as d3 from 'd3';\nexport const Stones = [{\n  stone: [[0, 0]]\n}, {\n  stone: [[0, 0], [0, 1]]\n}, {\n  stone: [[0, 0], [1, 0]]\n}, {\n  stone: [[0, 0], [0, 1], [0, 2]]\n}, {\n  stone: [[0, 0], [1, 0], [2, 0]]\n}, {\n  stone: [[0, 0], [1, 0], [1, 1]]\n}, {\n  stone: [[0, 0], [1, 0], [0, 1]]\n}, {\n  stone: [[0, 0], [0, 1], [1, 1]]\n}, {\n  stone: [[1, 0], [1, 1], [0, 1]]\n}, {\n  stone: [[0, 0], [0, 1], [0, 2], [0, 3]]\n}, {\n  stone: [[0, 0], [1, 0], [2, 0], [3, 0]]\n}, {\n  stone: [[0, 0], [0, 1], [1, 0], [1, 1]]\n}, {\n  stone: [[0, 0], [0, 1], [0, 2], [1, 2]]\n}, {\n  stone: [[1, 0], [1, 1], [1, 2], [0, 2]]\n}, {\n  stone: [[0, 0], [1, 0], [0, 1], [2, 0]]\n}, {\n  stone: [[0, 0], [1, 0], [2, 0], [2, 1]]\n}, {\n  stone: [[1, 0], [1, 1], [1, 2], [0, 1]]\n}, {\n  stone: [[0, 0], [0, 1], [0, 2], [1, 1]]\n}, {\n  stone: [[1, 0], [0, 1], [1, 1], [2, 1]]\n}, {\n  stone: [[0, 0], [1, 0], [2, 0], [1, 1]]\n}, {\n  stone: [[0, 1], [1, 0], [1, 1], [2, 0]]\n}, {\n  stone: [[0, 0], [1, 0], [1, 1], [2, 1]]\n}, {\n  stone: [[0, 0], [1, 0], [2, 0], [0, 1], [1, 1], [2, 1], [0, 2], [1, 2], [2, 2]]\n}];\nexport const generateStones = N => {\n  let stn = d3.range(N).map(n => {\n    return Math.floor(Math.random() * Stones.length);\n  });\n  return stn;\n};","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Stones.js"],"names":["d3","Stones","stone","generateStones","N","stn","range","map","n","Math","floor","random","length"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nexport const Stones = [\n    {stone:[[0,0]]},\n\n    {stone:[[0,0],[0,1]]}, \n    {stone:[[0,0],[1,0]]},\n\n    {stone:[[0,0],[0,1],[0,2]]},\n    {stone:[[0,0],[1,0],[2,0]]},\n    {stone:[[0,0],[1,0],[1,1]]},\n    {stone:[[0,0],[1,0],[0,1]]},\n    {stone:[[0,0],[0,1],[1,1]]},\n    {stone:[[1,0],[1,1],[0,1]]},\n\n    {stone:[[0,0],[0,1],[0,2],[0,3]]},\n    {stone:[[0,0],[1,0],[2,0],[3,0]]},\n    {stone:[[0,0],[0,1],[1,0],[1,1]]},\n    {stone:[[0,0],[0,1],[0,2],[1,2]]},\n    {stone:[[1,0],[1,1],[1,2],[0,2]]},\n    {stone:[[0,0],[1,0],[0,1],[2,0]]},\n    {stone:[[0,0],[1,0],[2,0],[2,1]]},\n    \n    {stone:[[1,0],[1,1],[1,2],[0,1]]},\n    {stone:[[0,0],[0,1],[0,2],[1,1]]},\n    {stone:[[1,0],[0,1],[1,1],[2,1]]},\n    {stone:[[0,0],[1,0],[2,0],[1,1]]},\n\n    {stone:[[0,1],[1,0],[1,1],[2,0]]},\n    {stone:[[0,0],[1,0],[1,1],[2,1]]},\n\n    {stone:[[0,0],[1,0],[2,0],[0,1],[1,1],[2,1],[0,2],[1,2],[2,2]]}\n]\n\nexport const generateStones = (N) => {\n    let stn = d3.range(N).map(n => {\n        return Math.floor(Math.random() * Stones.length)\n    })\n    return stn\n}"]},"metadata":{},"sourceType":"module"}