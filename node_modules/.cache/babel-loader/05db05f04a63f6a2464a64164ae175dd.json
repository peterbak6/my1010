{"ast":null,"code":"import{Box}from'@material-ui/core';import React,{useRef,useLayoutEffect}from'react';import useStyles from'../style';import*as d3 from'd3';import{generateStones}from'./Stones';import{jsx as _jsx}from\"react/jsx-runtime\";var draw=function draw(div,config,handleGameChange){var s=config.size,p=config.padding,width=config.grid*(s+p),height=width;var col=d3.scaleOrdinal().range(config.colors);var board=d3.range(config.grid).map(function(r){return d3.range(config.grid).map(function(c){return{x:c*(s+p),y:r*(s+p),free:true};});});var stones=generateStones(config.stones),drawnStones=[],stoneCodes={},currentStoneNrs=[],currentStoneStartpost={x:0,y:0},stonesLayed=0,movingStone=0;var removeCell=function removeCell(cell){cell.stone.transition().duration(500).attr(\"x\",s/2).attr(\"y\",s/2).attr(\"height\",0).attr(\"width\",0).remove();cell['stone']=null;cell.free=true;};var checkRowColFull=function checkRowColFull(){var fullRow=[],fullColumn=[];var _loop=function _loop(r){var cRow=board[r].every(function(c){return!c.free;});var cCol=board.map(function(b){return b[r];}).every(function(c){return!c.free;});if(cRow){fullRow.push(r);}if(cCol){fullColumn.push(r);}};for(var r=0;r<config.grid;r++){_loop(r);}fullRow.forEach(function(row){board[row].forEach(function(cell){removeCell(cell);});});fullColumn.forEach(function(col){board.forEach(function(row){var cell=row[col];removeCell(cell);});});return(fullRow.length+fullColumn.length)*config.grid;};var snapToGrid=function snapToGrid(x,y){var pos={c:Math.max(0,Math.floor(x/(s+p))),r:Math.max(0,Math.floor(y/(s+p)))};if(pos.r>=config.grid){//TODO: position to the origianl position !  !  !\npos.y=currentStoneStartpost.y;//height + s * 2\npos.x=currentStoneStartpost.x;//(width - s) / 2\npos.c=pos.r=null;}else{pos.y=Math.min(config.grid-1,pos.r)*(s+p);pos.x=Math.min(config.grid-1,pos.c)*(s+p);}return pos;};var checkPositionFree=function checkPositionFree(pos,codes){var flag=true;codes.forEach(function(t){if(pos.c===null||pos.r===null){flag=false;}else if(t[0]+pos.c>=config.grid||t[0]+pos.c<0||t[1]+pos.r>=config.grid||t[1]+pos.r<0){flag=false;}else if(board[t[1]+pos.r][t[0]+pos.c].free===false){flag=false;}});return flag;};var setPosition=function setPosition(pos,val,codes,stn){codes.forEach(function(t,i){board[t[1]+pos.r][t[0]+pos.c].free=val;board[t[1]+pos.r][t[0]+pos.c].stone=stn[i];});};var moveStone=function moveStone(x,y,stn){stn.forEach(function(t){return t.attr(\"transform\",\"translate(\"+x+\",\"+y+\")\");});};var drawnPiecePos=0;var drawStonePieces=function drawStonePieces(stn,color,index){var pieces=[];var stoneWidth=d3.max(stn.map(function(s){return s[0];}));var stonePosY=height+s*2;var stonePosX=drawnPiecePos*(s+p);if(stonePosX>width-stoneWidth*(s+p)){stonePosY=height+s*4;stonePosX=width-stoneWidth*(s+p);}stn.forEach(function(cell){var piece=svg.append(\"rect\").attr(\"class\",\"stn\").attr(\"stn\",index).attr(\"row\",cell[1]).attr(\"col\",cell[0]).attr(\"x\",cell[0]*(s+p)).attr(\"y\",cell[1]*(s+p)).attr(\"width\",s).attr(\"height\",s).attr(\"rx\",1).attr(\"ry\",1).style(\"fill\",col(color)).style(\"fill-opacity\",0.75).style(\"stroke\",\"#000\").attr(\"transform\",\"translate(\"+(stonePosX+2)+\",\"+stonePosY+\")\").call(drag);pieces.push(piece);});drawnPiecePos+=stoneWidth+2;return pieces;};var drawStone=function drawStone(){if(currentStoneNrs.length>0){return;}stones=generateStones(config.stones);drawnPiecePos=0;for(var i=0,I=stones.length;i<I;i++){var stn=stones.shift();stoneCodes[stonesLayed]=stn.stone;var pieces=drawStonePieces(stn.stone,stn.type,stonesLayed);drawnStones.push(pieces);currentStoneNrs.push(stonesLayed);stonesLayed++;}};function dragstarted(event){movingStone=+d3.select(this).attr(\"stn\");var pos={x:event.x,y:event.y};var stn=drawnStones[movingStone];var offset={x:svg.node().getBoundingClientRect().x,y:svg.node().getBoundingClientRect().y};stn.forEach(function(s){pos.x=Math.min(pos.x,s.node().getBoundingClientRect().x-offset.x);pos.y=Math.min(pos.y,s.node().getBoundingClientRect().y-offset.y);});currentStoneStartpost=pos;if(currentStoneNrs.indexOf(movingStone)<0){movingStone=null;}}function dragged(event){if(movingStone===null){return;}var stn=drawnStones[movingStone];var stnCode=stoneCodes[movingStone];var pos=snapToGrid(event.x,event.y);moveStone(pos.x,pos.y,stn);var check=checkPositionFree(pos,stnCode);stn.forEach(function(m){m.style(\"fill-opacity\",check===false?0.25:0.75);});}function dragended(event){if(movingStone===null){return;}var stn=drawnStones[movingStone];var stnCode=stoneCodes[movingStone];var pos=snapToGrid(event.x,event.y);var check=checkPositionFree(pos,stnCode);if(check===true){setPosition(pos,false,stnCode,stn);currentStoneNrs.splice(currentStoneNrs.indexOf(movingStone),1);var points=checkRowColFull();handleGameChange('points',points);drawStone();}else{pos=snapToGrid(width,height);moveStone(pos.x,pos.y,stn);stn.forEach(function(m){m.style(\"fill-opacity\",0.75);});}}var drag=d3.drag().on(\"start\",dragstarted).on(\"drag\",dragged).on(\"end\",dragended);d3.select(div).selectAll('*').remove();var svg=d3.select(div).append(\"svg\").attr(\"width\",width+p*2).attr(\"height\",(height+p)*2).append(\"g\").attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");var row=svg.selectAll(\".row\").data(board).enter().append(\"g\").attr(\"class\",\"row\");row.selectAll(\".square\").data(function(d){return d;}).enter().append(\"rect\").attr(\"class\",\"board\").attr(\"x\",function(d){return d.x;}).attr(\"y\",function(d){return d.y;}).attr(\"width\",s).attr(\"height\",s).attr(\"rx\",s/config.size).attr(\"ry\",s/config.size).style(\"fill\",\"#fff\").style(\"stroke\",\"#a2a2a2\");drawStone();};var Board=function Board(_ref){var config=_ref.config,points=_ref.points,handleChange=_ref.handleChange;var classes=useStyles();var widgetRef=useRef(null);var handleGameChange=function handleGameChange(key,value){handleChange(key,value);};useLayoutEffect(function(){if(points>0){return;}draw(widgetRef.current,config,handleGameChange);});return/*#__PURE__*/_jsx(Box,{className:classes.board,ref:widgetRef});};export default Board;","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js"],"names":["Box","React","useRef","useLayoutEffect","useStyles","d3","generateStones","draw","div","config","handleGameChange","s","size","p","padding","width","grid","height","col","scaleOrdinal","range","colors","board","map","r","c","x","y","free","stones","drawnStones","stoneCodes","currentStoneNrs","currentStoneStartpost","stonesLayed","movingStone","removeCell","cell","stone","transition","duration","attr","remove","checkRowColFull","fullRow","fullColumn","cRow","every","cCol","b","push","forEach","row","length","snapToGrid","pos","Math","max","floor","min","checkPositionFree","codes","flag","t","setPosition","val","stn","i","moveStone","drawnPiecePos","drawStonePieces","color","index","pieces","stoneWidth","stonePosY","stonePosX","piece","svg","append","style","call","drag","drawStone","I","shift","type","dragstarted","event","select","offset","node","getBoundingClientRect","indexOf","dragged","stnCode","check","m","dragended","splice","points","on","selectAll","data","enter","d","Board","handleChange","classes","widgetRef","key","value","current"],"mappings":"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","sourcesContent":["import { Box } from '@material-ui/core'\nimport React, {useRef, useLayoutEffect} from 'react'\n\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones'\n\nconst draw = (div, config, handleGameChange) => {\n    \n    let s = config.size, p=config.padding, width = config.grid * (s + p), height = width;\n    let col = d3.scaleOrdinal().range(config.colors);\n\n    const board = d3.range(config.grid).map((r) => \n        d3.range(config.grid).map((c) => \n            ({\n                x: c * (s + p), \n                y: r * (s + p), \n                free: true \n            })));\n\n    let stones = generateStones(config.stones), \n        drawnStones = [], \n        stoneCodes = {},\n        currentStoneNrs = [], \n        currentStoneStartpost = {x:0, y:0},\n        stonesLayed = 0, \n        movingStone = 0;\n\n    const removeCell = (cell) => {\n        cell.stone.transition().duration(500)\n            .attr(\"x\",s / 2).attr(\"y\", s / 2)\n            .attr(\"height\", 0).attr(\"width\",0).remove();\n        cell['stone'] = null;\n        cell.free = true;\n    }\n\n    const checkRowColFull = () => {\n        let fullRow = [], fullColumn = [];\n        for (let r = 0; r < config.grid; r++){\n            let cRow = board[r].every(c=>!c.free);\n            let cCol = board.map(b => b[r]).every(c=>!c.free);\n            if (cRow) {\n                fullRow.push(r);\n            }\n            if (cCol) {\n                fullColumn.push(r);\n            }\n        }\n        fullRow.forEach(row => {\n            board[row].forEach(cell => {\n                removeCell(cell)\n            })\n        })\n        fullColumn.forEach(col => {\n            board.forEach(row => {\n                let cell = row[col]\n                removeCell(cell);\n            })\n        })\n        return (fullRow.length + fullColumn.length) * config.grid;\n    }\n        \n    const snapToGrid = (x, y) => {\n        let pos = {\n            c: Math.max(0, Math.floor(x / (s + p))),\n            r: Math.max(0, Math.floor(y / (s + p)))\n        }\n        if (pos.r >= config.grid) {\n            //TODO: position to the origianl position !  !  !\n            pos.y = currentStoneStartpost.y; //height + s * 2\n            pos.x = currentStoneStartpost.x; //(width - s) / 2\n            pos.c = pos.r = null;\n        } else {\n            pos.y = Math.min(config.grid-1, pos.r) * (s + p)\n            pos.x = Math.min(config.grid-1, pos.c) * (s + p)\n        }\n        return pos\n    }\n\n    const checkPositionFree = (pos, codes) => {\n        let flag = true;\n        codes.forEach(t => {\n            if (pos.c===null || pos.r===null){\n                flag = false\n            } else if (t[0]+pos.c >= config.grid || t[0]+pos.c < 0 || t[1]+pos.r >= config.grid || t[1]+pos.r < 0){\n                flag = false\n            } else if (board[t[1]+pos.r][t[0]+pos.c].free===false){\n                flag = false;\n            }\n        })\n        return flag;\n    }\n\n    const setPosition = (pos, val, codes, stn) => {\n        codes.forEach((t,i) => {\n            board[t[1]+pos.r][t[0]+pos.c].free = val;\n            board[t[1]+pos.r][t[0]+pos.c].stone = stn[i];\n        });\n    }\n\n    const moveStone = (x, y, stn) => {\n        stn.forEach(t => t.attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\"));\n    }\n\n    let drawnPiecePos = 0;\n    const drawStonePieces  = (stn, color, index) => {\n        let pieces = []\n        let stoneWidth = d3.max(stn.map(s => s[0]));\n        let stonePosY = height + s * 2\n        let stonePosX = drawnPiecePos * (s + p);\n        if (stonePosX > width - stoneWidth * (s + p)){\n            stonePosY = height + s * 4\n            stonePosX = width - stoneWidth * (s + p)\n        }\n        stn.forEach((cell) => {\n            let piece = svg.append(\"rect\")\n                .attr(\"class\",\"stn\")\n                .attr(\"stn\", index)\n                .attr(\"row\", cell[1])\n                .attr(\"col\", cell[0])\n                .attr(\"x\", cell[0] * (s + p) )\n                .attr(\"y\", cell[1] * (s + p))\n                .attr(\"width\", s )\n                .attr(\"height\", s )\n                .attr(\"rx\", 1)\n                .attr(\"ry\", 1)\n                .style(\"fill\", col(color))\n                .style(\"fill-opacity\", 0.75)\n                .style(\"stroke\", \"#000\")\n                .attr(\"transform\",\"translate(\"+(stonePosX + 2)+\",\"+(stonePosY)+\")\")\n                .call(drag);\n            pieces.push(piece)\n        })\n        drawnPiecePos += stoneWidth + 2;\n        return pieces;\n    }\n \n    const drawStone = () => {\n        if (currentStoneNrs.length>0){ return }\n\n        stones = generateStones(config.stones);\n        drawnPiecePos = 0;\n        for (let i = 0, I = stones.length; i < I; i++){\n            const stn = stones.shift();\n            stoneCodes[stonesLayed] = stn.stone;\n            let pieces = drawStonePieces(stn.stone, stn.type, stonesLayed);\n            drawnStones.push(pieces);\n            currentStoneNrs.push(stonesLayed);\n            stonesLayed++;\n        }\n    }\n\n    function dragstarted(event) {\n        movingStone = +d3.select(this).attr(\"stn\");\n        let pos = {x: event.x, y: event.y}\n        let stn = drawnStones[movingStone];\n        let offset = {x: svg.node().getBoundingClientRect().x, \n            y: svg.node().getBoundingClientRect().y};\n        stn.forEach(s => {\n            pos.x = Math.min(pos.x, s.node().getBoundingClientRect().x - offset.x)\n            pos.y = Math.min(pos.y, s.node().getBoundingClientRect().y - offset.y) \n        });\n        currentStoneStartpost = pos;\n        if (currentStoneNrs.indexOf(movingStone) < 0){ \n            movingStone = null; \n        }\n    }\n    \n    function dragged(event) {\n        if (movingStone===null){return;}\n        let stn = drawnStones[movingStone]\n        let stnCode = stoneCodes[movingStone]\n        let pos = snapToGrid(event.x, event.y);\n        moveStone(pos.x, pos.y, stn)\n        let check  = checkPositionFree(pos, stnCode);\n        stn.forEach(m => {\n            m.style(\"fill-opacity\", check===false ? 0.25 : 0.75)\n        });\n    }\n    \n    function dragended(event) {\n        if (movingStone===null){return;}\n        let stn = drawnStones[movingStone]\n        let stnCode = stoneCodes[movingStone]\n        let pos = snapToGrid(event.x, event.y);\n        let check  = checkPositionFree(pos, stnCode);\n\n        if (check===true){\n            setPosition(pos, false, stnCode, stn)\n            currentStoneNrs.splice(currentStoneNrs.indexOf(movingStone), 1);\n            let points = checkRowColFull();\n            handleGameChange('points', points);\n            drawStone();\n        } else {\n            pos = snapToGrid(width, height);\n            moveStone(pos.x, pos.y, stn);\n            stn.forEach(m => {\n                m.style(\"fill-opacity\", 0.75)\n            });\n        }\n    }\n    \n    const drag = d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n\n    d3.select(div).selectAll('*').remove();\n\n    const svg = d3.select(div).append(\"svg\")\n        .attr(\"width\", width + p * 2)\n        .attr(\"height\", (height + p) * 2)\n        .append(\"g\")\n        .attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");\n\n    let row = svg.selectAll(\".row\")\n        .data(board)\n        .enter().append(\"g\")\n        .attr(\"class\", \"row\");\n\n    row.selectAll(\".square\")\n        .data((d) => d)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"board\")\n        .attr(\"x\", (d) => d.x )\n        .attr(\"y\", (d) => d.y )\n        .attr(\"width\", s )\n        .attr(\"height\", s )\n        .attr(\"rx\", s/config.size)\n        .attr(\"ry\", s/config.size)\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#a2a2a2\");\n\n    drawStone();\n    \n}\n\nconst Board = ({config, points, handleChange}) => {\n    const classes = useStyles();\n    const widgetRef = useRef(null);\n\n    const handleGameChange = (key, value) => {\n        handleChange(key, value);\n    }\n\n    useLayoutEffect(() => {\n        if (points > 0){ return; }\n        draw(widgetRef.current, config, handleGameChange);\n    });\n\n    return <Box className={classes.board} ref={widgetRef}></Box>\n\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}