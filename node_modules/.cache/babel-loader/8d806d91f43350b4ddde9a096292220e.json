{"ast":null,"code":"var _jsxFileName = \"/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@material-ui/core';\nimport React, { useRef, useLayoutEffect } from 'react';\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport Items from './Items';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generateTargets = (N = 20, E = Items.length) => {\n  let targets = d3.range(N).map(n => {\n    return Math.floor(Math.random() * E);\n  });\n  return targets;\n};\n\nconst draw = div => {\n  const config = {\n    size: 40,\n    grid: 10,\n    padding: 2,\n    stones: 43\n  };\n  let s = config.size,\n      p = config.padding,\n      width = config.grid * (s + p),\n      height = width;\n\n  const snapToGrid = (x, y) => {\n    let pos = {\n      c: Math.max(0, Math.floor(x / (s + p))),\n      r: Math.max(0, Math.floor(y / (s + p)))\n    };\n\n    if (pos.r >= config.grid) {\n      pos.y = height + s * 2;\n      pos.x = (width - s) / 2;\n      pos.c = pos.r = null;\n    } else {\n      pos.y = Math.min(config.grid - 1, pos.r) * (s + p);\n      pos.x = Math.min(config.grid - 1, pos.c) * (s + p);\n    }\n\n    console.info(pos);\n    return pos;\n  };\n\n  const checkPosition = pos => {\n    const target = targetGrid[movingTarget];\n    let flag = true;\n    target.forEach(t => {\n      if (pos.c === null || pos.r === null) {\n        flag = false;\n      } else if (t[0] + pos.c >= config.grid || t[0] + pos.c < 0 || t[1] + pos.r >= config.grid || t[1] + pos.r < 0) {\n        flag = false;\n      } else if (board[t[0] + pos.c][t[1] + pos.r].free === false) {\n        flag = false;\n      }\n    });\n    return flag;\n  };\n\n  const setPosition = (pos, val) => {\n    const target = targetGrid[movingTarget];\n    target.forEach(t => {\n      board[t[0] + pos.c][t[1] + pos.r].free = val;\n    });\n    board.map(a => console.info(a.join(\",\")));\n  };\n\n  function dragstarted(event) {\n    movingTarget = +d3.select(this).attr(\"target\");\n\n    if (movingTarget < currentTargetNr) {\n      svg.selectAll('[target=\"' + currentTargetNr + '\"]').remove();\n      drawnTargets.splice(currentTargetNr, 1);\n      let pos = {\n        x: event.x,\n        y: event.y\n      };\n      drawnTargets[movingTarget].forEach(m => {\n        pos.x = Math.min(pos.x, m.attr(\"x\"));\n        pos.y = Math.min(pos.y, m.attr(\"y\"));\n      });\n      pos = snapToGrid(pos.x, pos.y);\n      setPosition(pos, true);\n      currentTargetNr--;\n    }\n  }\n\n  function dragged(event) {\n    let pos = {\n      x: event.x,\n      y: event.y\n    };\n    drawnTargets[movingTarget].forEach(m => {\n      pos.x = Math.min(pos.x, m.attr(\"x\"));\n      pos.y = Math.min(pos.y, m.attr(\"y\"));\n    });\n    pos = snapToGrid(pos.x, pos.y);\n    moveTarget(pos.x, pos.y);\n    let check = checkPosition(pos);\n    drawnTargets[movingTarget].forEach(m => {\n      m.attr(\"opacity\", check === false ? 0.5 : 1);\n    });\n  }\n\n  function dragended(event) {\n    let pos = snapToGrid(event.x, event.y);\n    let check = checkPosition(pos);\n\n    if (check === true) {\n      setPosition(pos, false);\n      currentTargetNr++;\n      drawTarget();\n    } else {\n      pos = snapToGrid(width, height);\n      moveTarget(pos.x, pos.y);\n      drawnTargets[movingTarget].forEach(m => {\n        m.attr(\"opacity\", 1);\n      });\n    }\n  }\n\n  const drag = d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  d3.select(div).selectAll('*').remove();\n  const svg = d3.select(div).append(\"svg\").attr(\"width\", width + p * 2).attr(\"height\", (height + p) * 2).append(\"g\").attr(\"transform\", \"translate(\" + p + \",\" + p + \")\");\n  const board = d3.range(config.grid).map((r, i) => d3.range(config.grid).map((c, j) => ({\n    x: c * (s + p),\n    y: i * (s + p),\n    free: true\n  })));\n  let row = svg.selectAll(\".row\").data(board).enter().append(\"g\").attr(\"class\", \"row\");\n  row.selectAll(\".square\").data(d => d).enter().append(\"rect\").attr(\"class\", \"square\").attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", \"#fff\").style(\"stroke\", \"#444\");\n  let targetGrid = generateTargets(config.stones, Items.length).map(t => Items[t]);\n  let drawnTargets = [];\n  let currentTargetNr = 0,\n      movingTarget = 0;\n\n  const drawTarget = (x = (width - s) / 2, y = height + s * 2) => {\n    const target = targetGrid[currentTargetNr];\n    let items = [];\n    target.forEach((cell, i) => {\n      let item = svg.append(\"rect\").attr(\"class\", \"target\").attr(\"target\", currentTargetNr).attr(\"x\", cell[0] * (s + p)).attr(\"y\", cell[1] * (s + p)).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", \"#ff7f00\").style(\"stroke\", \"#000\").attr(\"transform\", \"translate(\" + x + \",\" + y + \")\").call(drag);\n      items.push(item);\n    });\n    drawnTargets.push(items);\n  };\n\n  const moveTarget = (x, y) => {\n    const target = drawnTargets[movingTarget];\n    target.forEach(t => t.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\"));\n  };\n\n  drawTarget();\n};\n\nconst Board = () => {\n  _s();\n\n  const classes = useStyles();\n  const widgetRef = useRef(null);\n  useLayoutEffect(() => {\n    draw(widgetRef.current);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.board,\n    ref: widgetRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Board, \"cFDRHWlqjeUjP2b8ZEl5Vn6bhi8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js"],"names":["Box","React","useRef","useLayoutEffect","useStyles","d3","Items","generateTargets","N","E","length","targets","range","map","n","Math","floor","random","draw","div","config","size","grid","padding","stones","s","p","width","height","snapToGrid","x","y","pos","c","max","r","min","console","info","checkPosition","target","targetGrid","movingTarget","flag","forEach","t","board","free","setPosition","val","a","join","dragstarted","event","select","attr","currentTargetNr","svg","selectAll","remove","drawnTargets","splice","m","dragged","moveTarget","check","dragended","drawTarget","drag","on","append","i","j","row","data","enter","d","style","items","cell","item","call","push","Board","classes","widgetRef","current"],"mappings":"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","sourcesContent":["import { Box } from '@material-ui/core'\nimport React, {useRef, useLayoutEffect} from 'react'\n\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport Items from './Items'\n\nconst generateTargets = (N=20, E=Items.length) => {\n    let targets = d3.range(N).map(n => {\n        return Math.floor(Math.random() * E)\n    })\n    return targets\n}\n\nconst draw = (div) => {\n    const config = {\n        size: 40,\n        grid: 10,\n        padding: 2,\n        stones: 43\n    }\n\n    let s = config.size, p=config.padding, width = config.grid * (s + p), height = width;\n\n    const snapToGrid = (x, y) => {\n        let pos = {\n            c: Math.max(0, Math.floor(x / (s + p))),\n            r: Math.max(0, Math.floor(y / (s + p)))\n        }\n        if (pos.r >= config.grid) {\n            pos.y = height + s * 2\n            pos.x = (width - s) / 2\n            pos.c = pos.r = null;\n        } else {\n            pos.y = Math.min(config.grid-1, pos.r) * (s + p)\n            pos.x = Math.min(config.grid-1, pos.c) * (s + p)\n        }\n        console.info(pos)\n        return pos\n    }\n\n    const checkPosition = (pos) => {\n        const target = targetGrid[movingTarget]\n        let flag = true;\n        target.forEach(t => {\n            if (pos.c===null || pos.r===null){\n                flag = false\n            } else if (t[0]+pos.c >= config.grid || t[0]+pos.c < 0 || t[1]+pos.r >= config.grid || t[1]+pos.r < 0){\n                flag = false\n            } else if (board[t[0]+pos.c][t[1]+pos.r].free===false){\n                flag = false;\n            }\n        })\n        return flag;\n    }\n\n    const setPosition = (pos, val) => {\n        const target = targetGrid[movingTarget]\n        target.forEach(t => {\n            board[t[0]+pos.c][t[1]+pos.r].free = val;\n        });\n        board.map(a => console.info(a.join(\",\")))\n    }\n\n    function dragstarted(event) {\n        movingTarget = +d3.select(this).attr(\"target\");\n        if (movingTarget < currentTargetNr){\n            svg.selectAll('[target=\"'+currentTargetNr+'\"]').remove();\n            drawnTargets.splice(currentTargetNr, 1)\n            let pos = {x: event.x, y: event.y}\n            drawnTargets[movingTarget].forEach(m => {\n                pos.x = Math.min(pos.x, m.attr(\"x\"))\n                pos.y = Math.min(pos.y, m.attr(\"y\"))\n            });\n            pos = snapToGrid(pos.x, pos.y)\n            setPosition(pos, true)\n            currentTargetNr--;\n        }\n    }\n    \n    function dragged(event) {\n        let pos = {x: event.x, y: event.y}\n        drawnTargets[movingTarget].forEach(m => {\n            pos.x = Math.min(pos.x, m.attr(\"x\"))\n            pos.y = Math.min(pos.y, m.attr(\"y\"))\n        });\n        pos = snapToGrid(pos.x, pos.y);\n        moveTarget(pos.x, pos.y)\n        let check  = checkPosition(pos);\n        drawnTargets[movingTarget].forEach(m => {\n            m.attr(\"opacity\", check===false ? 0.5 : 1)\n        });\n    }\n    \n    function dragended(event) {\n        let pos = snapToGrid(event.x, event.y);\n        let check  = checkPosition(pos);\n\n        if (check===true){\n            setPosition(pos, false)\n            currentTargetNr++;\n            drawTarget();\n        } else {\n            pos = snapToGrid(width, height);\n            moveTarget(pos.x, pos.y);\n            drawnTargets[movingTarget].forEach(m => {\n                m.attr(\"opacity\", 1)\n            });\n        }\n    }\n    \n    const drag = d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n\n    d3.select(div).selectAll('*').remove();\n\n    const svg = d3.select(div).append(\"svg\")\n        .attr(\"width\", width + p * 2)\n        .attr(\"height\", (height + p) * 2)\n        .append(\"g\")\n        .attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");\n    \n    const board = d3.range(config.grid).map((r, i) => \n        d3.range(config.grid).map((c, j) => \n            ({\n                x: c * (s + p), \n                y: i * (s + p), \n                free: true \n            })));\n\n    let row = svg.selectAll(\".row\")\n        .data(board)\n        .enter().append(\"g\")\n        .attr(\"class\", \"row\");\n\n    row.selectAll(\".square\")\n        .data((d) => d)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"square\")\n        .attr(\"x\", (d) => d.x )\n        .attr(\"y\", (d) => d.y )\n        .attr(\"width\", s )\n        .attr(\"height\", s )\n        .attr(\"rx\", s/10)\n        .attr(\"ry\", s/10)\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#444\");\n    \n    let targetGrid = generateTargets(config.stones, Items.length).map(t => Items[t])\n    let drawnTargets = [];\n    let currentTargetNr = 0, movingTarget = 0;\n\n    const drawTarget = (x = (width - s) / 2, y = height + s * 2) => {\n        const target = targetGrid[currentTargetNr];\n        let items = []\n        target.forEach((cell, i) => {\n            let item = svg.append(\"rect\")\n                .attr(\"class\",\"target\")\n                .attr(\"target\", currentTargetNr)\n                .attr(\"x\", cell[0] * (s + p) )\n                .attr(\"y\", cell[1] * (s + p))\n                .attr(\"width\", s )\n                .attr(\"height\", s )\n                .attr(\"rx\", s/10)\n                .attr(\"ry\", s/10)\n                .style(\"fill\", \"#ff7f00\")\n                .style(\"stroke\", \"#000\")\n                .attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\")\n                .call(drag);\n            items.push(item)\n        })\n        drawnTargets.push(items)\n    }\n\n    const moveTarget = (x, y) => {\n        const target = drawnTargets[movingTarget];\n        target.forEach(t => t.attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\"));\n    }\n\n    drawTarget();\n    \n}\n\nconst Board = () => {\n    const classes = useStyles();\n    const widgetRef = useRef(null);\n\n    useLayoutEffect(() => {\n        \n        draw(widgetRef.current);\n        \n    });\n\n    return <Box className={classes.board} ref={widgetRef}>\n        \n    </Box>\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}