{"ast":null,"code":"var _jsxFileName = \"/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@material-ui/core';\nimport React, { useRef, useLayoutEffect } from 'react';\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst draw = (div, config, handleGameChange) => {\n  let s = config.size,\n      p = config.padding,\n      width = config.grid * (s + p),\n      height = width;\n  let col = d3.scaleOrdinal().range(config.colors);\n  const board = d3.range(config.grid).map(r => d3.range(config.grid).map(c => ({\n    x: c * (s + p),\n    y: r * (s + p),\n    free: true\n  })));\n  let stones = generateStones(config.stones),\n      drawnStones = [],\n      stoneCodes = {},\n      currentStoneNrs = [],\n      stonesLayed = 0,\n      movingStone = 0;\n\n  const snapToGrid = (x, y) => {\n    let pos = {\n      c: Math.max(0, Math.floor(x / (s + p))),\n      r: Math.max(0, Math.floor(y / (s + p)))\n    };\n\n    if (pos.r >= config.grid) {\n      pos.y = height + s * 2;\n      pos.x = (width - s) / 2;\n      pos.c = pos.r = null;\n    } else {\n      pos.y = Math.min(config.grid - 1, pos.r) * (s + p);\n      pos.x = Math.min(config.grid - 1, pos.c) * (s + p);\n    }\n\n    return pos;\n  };\n\n  const checkPosition = pos => {\n    const codes = stoneCodes[movingStone];\n    let flag = true;\n    codes.forEach(t => {\n      if (pos.c === null || pos.r === null) {\n        flag = false;\n      } else if (t[0] + pos.c >= config.grid || t[0] + pos.c < 0 || t[1] + pos.r >= config.grid || t[1] + pos.r < 0) {\n        flag = false;\n      } else if (board[t[1] + pos.r][t[0] + pos.c].free === false) {\n        flag = false;\n      }\n    });\n    return flag;\n  };\n\n  const setPosition = (pos, val) => {\n    const codes = stoneCodes[movingStone];\n    codes.forEach(t => {\n      board[t[1] + pos.r][t[0] + pos.c].free = val;\n    });\n    board.map(a => console.info(a.map(b => b.free ? 1 : 0).join(\",\")));\n  };\n\n  const moveStone = (x, y) => {\n    const stn = drawnStones[movingStone];\n    stn.forEach(t => t.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\"));\n  };\n\n  function dragstarted(event) {\n    movingStone = +d3.select(this).attr(\"stn\");\n\n    if (currentStoneNrs.indexOf(movingStone) < 0) {\n      //(movingStone !== currentStoneNr){\n      movingStone = null;\n    }\n  }\n\n  function dragged(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    moveStone(pos.x, pos.y);\n    drawnStones[movingStone].forEach(m => {\n      pos.x = Math.min(pos.x, m.attr(\"x\"));\n      pos.y = Math.min(pos.y, m.attr(\"y\"));\n    });\n    let check = checkPosition(pos);\n    drawnStones[movingStone].forEach(m => {\n      m.style(\"fill-opacity\", check === false ? 0.25 : 0.75);\n    });\n  }\n\n  function dragended(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    let check = checkPosition(pos);\n\n    if (check === true) {\n      setPosition(pos, false);\n      currentStoneNrs.splice(currentStoneNrs.indexOf(movingStone), 1); // currentStoneNr++;\n\n      drawStone();\n    } else {\n      pos = snapToGrid(width, height);\n      moveStone(pos.x, pos.y);\n      drawnStones[movingStone].forEach(m => {\n        m.style(\"fill-opacity\", 0.75);\n      });\n    }\n  }\n\n  const drag = d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  d3.select(div).selectAll('*').remove();\n  const svg = d3.select(div).append(\"svg\").attr(\"width\", width + p * 2).attr(\"height\", (height + p) * 2).append(\"g\").attr(\"transform\", \"translate(\" + p + \",\" + p + \")\");\n  let row = svg.selectAll(\".row\").data(board).enter().append(\"g\").attr(\"class\", \"row\");\n  row.selectAll(\".square\").data(d => d).enter().append(\"rect\").attr(\"class\", \"square\").attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", \"#fff\").style(\"stroke\", \"#444\");\n  let drawnPiecePos = 0;\n\n  const drawStonePieces = (stn, color, index) => {\n    let pieces = [];\n    let stoneWidth = d3.max(stn.map(s => s[0]));\n    let stonePosY = height + s * 2;\n    let stonePosX = drawnPiecePos * (s + p);\n\n    if (stonePosX > width - stoneWidth * (s + p)) {\n      stonePosY = height + s * 4;\n      stonePosX = width / 2;\n    }\n\n    stn.forEach(cell => {\n      let piece = svg.append(\"rect\").attr(\"class\", \"stn\").attr(\"stn\", index).attr(\"x\", cell[0] * (s + p)).attr(\"y\", cell[1] * (s + p)).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", col(color)).style(\"fill-opacity\", 0.75).style(\"stroke\", \"#000\").attr(\"transform\", \"translate(\" + (stonePosX + 2) + \",\" + stonePosY + \")\").call(drag);\n      pieces.push(piece);\n    });\n    drawnPiecePos += stoneWidth + 2;\n    return pieces;\n  };\n\n  const drawStone = () => {\n    if (currentStoneNrs.length > 0) {\n      return;\n    }\n\n    stones = generateStones(config.stones);\n    drawnPiecePos = 0;\n\n    for (let i = 0, I = stones.length; i < I; i++) {\n      const stn = stones.shift();\n      stoneCodes[stonesLayed] = stn.stone;\n      let pieces = drawStonePieces(stn.stone, stn.type, stonesLayed);\n      drawnStones.push(pieces);\n      currentStoneNrs.push(stonesLayed);\n      handleGameChange('step', stonesLayed);\n      stonesLayed++;\n    }\n  };\n\n  drawStone();\n};\n\nconst Board = ({\n  config,\n  game,\n  handleChange\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const widgetRef = useRef(null);\n\n  const handleGameChange = (key, value) => {\n    handleChange(key, value);\n  };\n\n  useLayoutEffect(() => {\n    if (!game || game.step > 1 || game.round > 1) {\n      return;\n    }\n\n    draw(widgetRef.current, config, handleGameChange);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.board,\n    ref: widgetRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Board, \"cFDRHWlqjeUjP2b8ZEl5Vn6bhi8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js"],"names":["Box","React","useRef","useLayoutEffect","useStyles","d3","generateStones","draw","div","config","handleGameChange","s","size","p","padding","width","grid","height","col","scaleOrdinal","range","colors","board","map","r","c","x","y","free","stones","drawnStones","stoneCodes","currentStoneNrs","stonesLayed","movingStone","snapToGrid","pos","Math","max","floor","min","checkPosition","codes","flag","forEach","t","setPosition","val","a","console","info","b","join","moveStone","stn","attr","dragstarted","event","select","indexOf","dragged","m","check","style","dragended","splice","drawStone","drag","on","selectAll","remove","svg","append","row","data","enter","d","drawnPiecePos","drawStonePieces","color","index","pieces","stoneWidth","stonePosY","stonePosX","cell","piece","call","push","length","i","I","shift","stone","type","Board","game","handleChange","classes","widgetRef","key","value","step","round","current"],"mappings":"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","sourcesContent":["import { Box } from '@material-ui/core'\nimport React, {useRef, useLayoutEffect} from 'react'\n\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones'\n\nconst draw = (div, config, handleGameChange) => {\n    \n    let s = config.size, p=config.padding, width = config.grid * (s + p), height = width;\n    let col = d3.scaleOrdinal().range(config.colors);\n\n    const board = d3.range(config.grid).map((r) => \n        d3.range(config.grid).map((c) => \n            ({\n                x: c * (s + p), \n                y: r * (s + p), \n                free: true \n            })));\n\n    let stones = generateStones(config.stones), \n        drawnStones = [], \n        stoneCodes = {},\n        currentStoneNrs = [], \n        stonesLayed = 0, \n        movingStone = 0;\n        \n    const snapToGrid = (x, y) => {\n        let pos = {\n            c: Math.max(0, Math.floor(x / (s + p))),\n            r: Math.max(0, Math.floor(y / (s + p)))\n        }\n        if (pos.r >= config.grid) {\n            pos.y = height + s * 2\n            pos.x = (width - s) / 2\n            pos.c = pos.r = null;\n        } else {\n            pos.y = Math.min(config.grid-1, pos.r) * (s + p)\n            pos.x = Math.min(config.grid-1, pos.c) * (s + p)\n        }\n        return pos\n    }\n\n    const checkPosition = (pos) => {\n        const codes = stoneCodes[movingStone];\n        let flag = true;\n        codes.forEach(t => {\n            if (pos.c===null || pos.r===null){\n                flag = false\n            } else if (t[0]+pos.c >= config.grid || t[0]+pos.c < 0 || t[1]+pos.r >= config.grid || t[1]+pos.r < 0){\n                flag = false\n            } else if (board[t[1]+pos.r][t[0]+pos.c].free===false){\n                flag = false;\n            }\n        })\n        return flag;\n    }\n\n    const setPosition = (pos, val) => {\n        const codes = stoneCodes[movingStone]\n        codes.forEach(t => {\n            board[t[1]+pos.r][t[0]+pos.c].free = val;\n        });\n        board.map(a => console.info(a.map(b => b.free ? 1 : 0).join(\",\")))\n    }\n\n    const moveStone = (x, y) => {\n        const stn = drawnStones[movingStone];\n        stn.forEach(t => t.attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\"));\n    }\n\n    function dragstarted(event) {\n        movingStone = +d3.select(this).attr(\"stn\");\n        if (currentStoneNrs.indexOf(movingStone) < 0){ //(movingStone !== currentStoneNr){\n            movingStone = null; \n        }\n    }\n    \n    function dragged(event) {\n        if (movingStone===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        moveStone(pos.x, pos.y)\n        drawnStones[movingStone].forEach(m => {\n            pos.x = Math.min(pos.x, m.attr(\"x\"))\n            pos.y = Math.min(pos.y, m.attr(\"y\"))\n        });\n        let check  = checkPosition(pos);\n        drawnStones[movingStone].forEach(m => {\n            m.style(\"fill-opacity\", check===false ? 0.25 : 0.75)\n        });\n    }\n    \n    function dragended(event) {\n        if (movingStone===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        let check  = checkPosition(pos);\n\n        if (check===true){\n            setPosition(pos, false)\n            currentStoneNrs.splice(currentStoneNrs.indexOf(movingStone), 1);\n            // currentStoneNr++;\n            drawStone();\n        } else {\n            pos = snapToGrid(width, height);\n            moveStone(pos.x, pos.y);\n            drawnStones[movingStone].forEach(m => {\n                m.style(\"fill-opacity\", 0.75)\n            });\n        }\n    }\n    \n    const drag = d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n\n    d3.select(div).selectAll('*').remove();\n\n    const svg = d3.select(div).append(\"svg\")\n        .attr(\"width\", width + p * 2)\n        .attr(\"height\", (height + p) * 2)\n        .append(\"g\")\n        .attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");\n\n    let row = svg.selectAll(\".row\")\n        .data(board)\n        .enter().append(\"g\")\n        .attr(\"class\", \"row\");\n\n    row.selectAll(\".square\")\n        .data((d) => d)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"square\")\n        .attr(\"x\", (d) => d.x )\n        .attr(\"y\", (d) => d.y )\n        .attr(\"width\", s )\n        .attr(\"height\", s )\n        .attr(\"rx\", s/10)\n        .attr(\"ry\", s/10)\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#444\");\n    \n    let drawnPiecePos = 0;\n    const drawStonePieces  = (stn, color, index) => {\n        let pieces = []\n        let stoneWidth = d3.max(stn.map(s => s[0]));\n        let stonePosY = height + s * 2\n        let stonePosX = drawnPiecePos * (s + p);\n        if (stonePosX > width - stoneWidth * (s+p)){\n            stonePosY = height + s * 4\n            stonePosX = width / 2\n        }\n        stn.forEach((cell) => {\n            let piece = svg.append(\"rect\")\n                .attr(\"class\",\"stn\")\n                .attr(\"stn\", index)\n                .attr(\"x\", cell[0] * (s + p) )\n                .attr(\"y\", cell[1] * (s + p))\n                .attr(\"width\", s )\n                .attr(\"height\", s )\n                .attr(\"rx\", s/10)\n                .attr(\"ry\", s/10)\n                .style(\"fill\", col(color))\n                .style(\"fill-opacity\", 0.75)\n                .style(\"stroke\", \"#000\")\n                .attr(\"transform\",\"translate(\"+(stonePosX + 2)+\",\"+(stonePosY)+\")\")\n                .call(drag);\n                pieces.push(piece)\n        })\n        drawnPiecePos += stoneWidth + 2;\n        return pieces;\n    }\n    const drawStone = () => {\n        if (currentStoneNrs.length>0){return}\n        stones = generateStones(config.stones);\n        drawnPiecePos = 0;\n        for (let i = 0, I = stones.length; i < I; i++){\n            const stn = stones.shift();\n            stoneCodes[stonesLayed] = stn.stone;\n            let pieces = drawStonePieces(stn.stone, stn.type, stonesLayed);\n            drawnStones.push(pieces);\n            currentStoneNrs.push(stonesLayed);\n            handleGameChange('step', stonesLayed);\n            stonesLayed++;\n        }\n    }\n\n    drawStone();\n    \n}\n\nconst Board = ({config, game, handleChange}) => {\n    const classes = useStyles();\n    const widgetRef = useRef(null);\n\n    const handleGameChange = (key, value) => {\n        handleChange(key, value);\n    }\n\n    useLayoutEffect(() => {\n        if (!game || game.step > 1 || game.round > 1){ return; }\n        draw(widgetRef.current, config, handleGameChange);\n    });\n\n    return <Box className={classes.board} ref={widgetRef}></Box>\n\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}