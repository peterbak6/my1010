{"ast":null,"code":"var _jsxFileName = \"/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@material-ui/core';\nimport React, { useRef, useLayoutEffect } from 'react';\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst draw = (div, config, handleGameChange) => {\n  let s = config.size,\n      p = config.padding,\n      width = config.grid * (s + p),\n      height = width;\n  let col = d3.scaleOrdinal().range(config.colors);\n  const board = d3.range(config.grid).map(r => d3.range(config.grid).map(c => ({\n    x: c * (s + p),\n    y: r * (s + p),\n    free: true\n  })));\n  let stones = generateStones(config.stones);\n  let drawnStones = [];\n  let curretnStonesNrs = [];\n  let stonesLayed = 0;\n  let currentStoneNr = 0,\n      movingStone = 0,\n      round = 1;\n\n  const snapToGrid = (x, y) => {\n    let pos = {\n      c: Math.max(0, Math.floor(x / (s + p))),\n      r: Math.max(0, Math.floor(y / (s + p)))\n    };\n\n    if (pos.r >= config.grid) {\n      pos.y = height + s * 2;\n      pos.x = (width - s) / 2;\n      pos.c = pos.r = null;\n    } else {\n      pos.y = Math.min(config.grid - 1, pos.r) * (s + p);\n      pos.x = Math.min(config.grid - 1, pos.c) * (s + p);\n    }\n\n    return pos;\n  };\n\n  const checkPosition = pos => {\n    const stn = stones[movingStone].stone;\n    let flag = true;\n    stn.forEach(t => {\n      if (pos.c === null || pos.r === null) {\n        flag = false;\n      } else if (t[0] + pos.c >= config.grid || t[0] + pos.c < 0 || t[1] + pos.r >= config.grid || t[1] + pos.r < 0) {\n        flag = false;\n      } else if (board[t[1] + pos.r][t[0] + pos.c].free === false) {\n        flag = false;\n      }\n    });\n    return flag;\n  };\n\n  const moveStone = (x, y) => {\n    const stn = drawnStones[movingStone];\n    stn.forEach(t => t.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\"));\n  };\n\n  const setPosition = (pos, val) => {\n    const stn = stones[movingStone].stone;\n    stn.forEach(t => {\n      board[t[1] + pos.r][t[0] + pos.c].free = val;\n    });\n    board.map(a => console.info(a.map(b => b.free ? 1 : 0).join(\",\")));\n  };\n\n  function dragstarted(event) {\n    movingStone = +d3.select(this).attr(\"stn\");\n\n    if (currentStoneNrs.indexOf(movingStone) < 0) {\n      //(movingStone !== currentStoneNr){\n      movingStone = null;\n    }\n  }\n\n  function dragged(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    moveStone(pos.x, pos.y);\n    drawnStones[movingStone].forEach(m => {\n      pos.x = Math.min(pos.x, m.attr(\"x\"));\n      pos.y = Math.min(pos.y, m.attr(\"y\"));\n    });\n    let check = checkPosition(pos);\n    drawnStones[movingStone].forEach(m => {\n      m.attr(\"opacity\", check === false ? 0.5 : 1);\n    });\n  }\n\n  function dragended(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    let check = checkPosition(pos);\n\n    if (check === true) {\n      setPosition(pos, false);\n      currentStoneNrs.splice(currentStoneNrs.indexOf(movingStone), 1); // currentStoneNr++;\n\n      drawStone();\n    } else {\n      pos = snapToGrid(width, height);\n      moveStone(pos.x, pos.y);\n      drawnStones[movingStone].forEach(m => {\n        m.attr(\"opacity\", 1);\n      });\n    }\n  }\n\n  const drag = d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  d3.select(div).selectAll('*').remove();\n  const svg = d3.select(div).append(\"svg\").attr(\"width\", width + p * 2).attr(\"height\", (height + p) * 2).append(\"g\").attr(\"transform\", \"translate(\" + p + \",\" + p + \")\");\n  let row = svg.selectAll(\".row\").data(board).enter().append(\"g\").attr(\"class\", \"row\");\n  row.selectAll(\".square\").data(d => d).enter().append(\"rect\").attr(\"class\", \"square\").attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", \"#fff\").style(\"stroke\", \"#444\");\n\n  const drawStonePieces = (stn, color, index) => {\n    let pieces = [];\n    stn.forEach((cell, i) => {\n      let piece = svg.append(\"rect\").attr(\"class\", \"stn\").attr(\"stn\", index).attr(\"x\", cell[0] * (s + p)).attr(\"y\", cell[1] * (s + p)).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", col(color)).style(\"stroke\", \"#000\").attr(\"transform\", \"translate(\" + (width - s) / 2 + \",\" + (height + s * 2) + \")\").call(drag);\n      pieces.push(piece);\n    });\n    return pieces;\n  };\n\n  const drawStone = () => {\n    if (currentStoneNrs.length > 0) {\n      return;\n    }\n\n    if (stones.length < 3) {\n      stones.push(...generateStones(config.stones));\n      round++;\n      handleGameChange('round', round);\n    }\n\n    for (let i = 0, I = 3; i < I; i++) {\n      const stn = stones.shift();\n      let pieces = drawStonePieces(stn.stone, stn.type, stonesLayed);\n      drawnStones.push(pieces);\n      currentStoneNrs.push(stonesLayed);\n      handleGameChange('step', currentStoneNr + 1);\n      stonesLayed++;\n    } // const stn = stones[currentStoneNr].stone;\n    // const color = stones[currentStoneNr].type;\n    // if (currentStoneNr === config.stones){\n    //     stones = generateStones(config.stones);\n    //     currentStoneNr = 0;\n    //     round++;\n    //     handleGameChange('round', round+1)\n    // }\n\n  };\n\n  drawStone();\n};\n\nconst Board = ({\n  config,\n  game,\n  handleChange\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const widgetRef = useRef(null);\n\n  const handleGameChange = (key, value) => {\n    handleChange(key, value);\n  };\n\n  useLayoutEffect(() => {\n    if (!game || game.step > 1 || game.round > 1) {\n      return;\n    }\n\n    draw(widgetRef.current, config, handleGameChange);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.board,\n    ref: widgetRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Board, \"cFDRHWlqjeUjP2b8ZEl5Vn6bhi8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js"],"names":["Box","React","useRef","useLayoutEffect","useStyles","d3","generateStones","draw","div","config","handleGameChange","s","size","p","padding","width","grid","height","col","scaleOrdinal","range","colors","board","map","r","c","x","y","free","stones","drawnStones","curretnStonesNrs","stonesLayed","currentStoneNr","movingStone","round","snapToGrid","pos","Math","max","floor","min","checkPosition","stn","stone","flag","forEach","t","moveStone","attr","setPosition","val","a","console","info","b","join","dragstarted","event","select","currentStoneNrs","indexOf","dragged","m","check","dragended","splice","drawStone","drag","on","selectAll","remove","svg","append","row","data","enter","d","style","drawStonePieces","color","index","pieces","cell","i","piece","call","push","length","I","shift","type","Board","game","handleChange","classes","widgetRef","key","value","step","current"],"mappings":"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","sourcesContent":["import { Box } from '@material-ui/core'\nimport React, {useRef, useLayoutEffect} from 'react'\n\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones'\n\nconst draw = (div, config, handleGameChange) => {\n    \n    let s = config.size, p=config.padding, width = config.grid * (s + p), height = width;\n    let col = d3.scaleOrdinal().range(config.colors);\n\n    const board = d3.range(config.grid).map((r) => \n        d3.range(config.grid).map((c) => \n            ({\n                x: c * (s + p), \n                y: r * (s + p), \n                free: true \n            })));\n\n    let stones = generateStones(config.stones)\n    let drawnStones = [];\n    let curretnStonesNrs = [];\n    let stonesLayed = 0;\n    let currentStoneNr = 0, movingStone = 0, round=1;\n        \n    const snapToGrid = (x, y) => {\n        let pos = {\n            c: Math.max(0, Math.floor(x / (s + p))),\n            r: Math.max(0, Math.floor(y / (s + p)))\n        }\n        if (pos.r >= config.grid) {\n            pos.y = height + s * 2\n            pos.x = (width - s) / 2\n            pos.c = pos.r = null;\n        } else {\n            pos.y = Math.min(config.grid-1, pos.r) * (s + p)\n            pos.x = Math.min(config.grid-1, pos.c) * (s + p)\n        }\n        return pos\n    }\n\n    const checkPosition = (pos) => {\n        const stn = stones[movingStone].stone\n        let flag = true;\n        stn.forEach(t => {\n            if (pos.c===null || pos.r===null){\n                flag = false\n            } else if (t[0]+pos.c >= config.grid || t[0]+pos.c < 0 || t[1]+pos.r >= config.grid || t[1]+pos.r < 0){\n                flag = false\n            } else if (board[t[1]+pos.r][t[0]+pos.c].free===false){\n                flag = false;\n            }\n        })\n        return flag;\n    }\n\n    const moveStone = (x, y) => {\n        const stn = drawnStones[movingStone];\n        stn.forEach(t => t.attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\"));\n    }\n\n    const setPosition = (pos, val) => {\n        const stn = stones[movingStone].stone\n        stn.forEach(t => {\n            board[t[1]+pos.r][t[0]+pos.c].free = val;\n        });\n        board.map(a => console.info(a.map(b => b.free ? 1 : 0).join(\",\")))\n    }\n\n    function dragstarted(event) {\n        movingStone = +d3.select(this).attr(\"stn\");\n        if (currentStoneNrs.indexOf(movingStone) < 0){ //(movingStone !== currentStoneNr){\n            movingStone = null; \n        }\n    }\n    \n    function dragged(event) {\n        if (movingStone===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        moveStone(pos.x, pos.y)\n        drawnStones[movingStone].forEach(m => {\n            pos.x = Math.min(pos.x, m.attr(\"x\"))\n            pos.y = Math.min(pos.y, m.attr(\"y\"))\n        });\n        let check  = checkPosition(pos);\n        drawnStones[movingStone].forEach(m => {\n            m.attr(\"opacity\", check===false ? 0.5 : 1)\n        });\n    }\n    \n    function dragended(event) {\n        if (movingStone===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        let check  = checkPosition(pos);\n\n        if (check===true){\n            setPosition(pos, false)\n            currentStoneNrs.splice(currentStoneNrs.indexOf(movingStone), 1);\n            // currentStoneNr++;\n            drawStone();\n        } else {\n            pos = snapToGrid(width, height);\n            moveStone(pos.x, pos.y);\n            drawnStones[movingStone].forEach(m => {\n                m.attr(\"opacity\", 1)\n            });\n        }\n    }\n    \n    const drag = d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n\n    d3.select(div).selectAll('*').remove();\n\n    const svg = d3.select(div).append(\"svg\")\n        .attr(\"width\", width + p * 2)\n        .attr(\"height\", (height + p) * 2)\n        .append(\"g\")\n        .attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");\n\n    let row = svg.selectAll(\".row\")\n        .data(board)\n        .enter().append(\"g\")\n        .attr(\"class\", \"row\");\n\n    row.selectAll(\".square\")\n        .data((d) => d)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"square\")\n        .attr(\"x\", (d) => d.x )\n        .attr(\"y\", (d) => d.y )\n        .attr(\"width\", s )\n        .attr(\"height\", s )\n        .attr(\"rx\", s/10)\n        .attr(\"ry\", s/10)\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#444\");\n    \n    const drawStonePieces  = (stn, color, index) => {\n        let pieces = []\n        stn.forEach((cell, i) => {\n            let piece = svg.append(\"rect\")\n                .attr(\"class\",\"stn\")\n                .attr(\"stn\", index)\n                .attr(\"x\", cell[0] * (s + p) )\n                .attr(\"y\", cell[1] * (s + p))\n                .attr(\"width\", s )\n                .attr(\"height\", s )\n                .attr(\"rx\", s/10)\n                .attr(\"ry\", s/10)\n                .style(\"fill\", col(color))\n                .style(\"stroke\", \"#000\")\n                .attr(\"transform\",\"translate(\"+((width - s) / 2)+\",\"+(height + s * 2)+\")\")\n                .call(drag);\n                pieces.push(piece)\n        })\n        return pieces;\n    }\n    const drawStone = () => {\n        if (currentStoneNrs.length>0){return}\n        if (stones.length < 3){\n            stones.push(...generateStones(config.stones));\n            round++;\n            handleGameChange('round', round)\n        }\n        for (let i = 0, I = 3; i < I; i++){\n            const stn = stones.shift();\n            let pieces = drawStonePieces(stn.stone, stn.type, stonesLayed);\n            drawnStones.push(pieces);\n            currentStoneNrs.push(stonesLayed);\n            handleGameChange('step', currentStoneNr+1);\n            stonesLayed++;\n        }\n        // const stn = stones[currentStoneNr].stone;\n        // const color = stones[currentStoneNr].type;\n        // if (currentStoneNr === config.stones){\n        //     stones = generateStones(config.stones);\n        //     currentStoneNr = 0;\n        //     round++;\n        //     handleGameChange('round', round+1)\n        // }\n        \n    }\n\n    drawStone();\n    \n}\n\nconst Board = ({config, game, handleChange}) => {\n    const classes = useStyles();\n    const widgetRef = useRef(null);\n\n    const handleGameChange = (key, value) => {\n        handleChange(key, value);\n    }\n\n    useLayoutEffect(() => {\n        if (!game || game.step > 1 || game.round > 1){ return; }\n        draw(widgetRef.current, config, handleGameChange);\n    });\n\n    return <Box className={classes.board} ref={widgetRef}></Box>\n\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}