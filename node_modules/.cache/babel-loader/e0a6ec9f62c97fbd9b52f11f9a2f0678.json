{"ast":null,"code":"var _jsxFileName = \"/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@material-ui/core';\nimport React, { useRef, useLayoutEffect } from 'react';\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport Stones from './Stones';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generateTargets = (N = 20, E = Stones.length) => {\n  let targets = d3.range(N).map(n => {\n    return Math.floor(Math.random() * E);\n  });\n  return targets;\n};\n\nconst draw = div => {\n  const config = {\n    size: 40,\n    grid: 10,\n    padding: 2,\n    stones: 43,\n    colors: [\"#66c2a5\", \"#fc8d62\", \"#8da0cb\", \"#e78ac3\", \"#a6d854\", \"#ffd92f\", \"#e5c494\", \"#b3b3b3\"]\n  };\n  let s = config.size,\n      p = config.padding,\n      width = config.grid * (s + p),\n      height = width;\n  let col = d3.scaleOrdinal().range(config.colors);\n\n  const snapToGrid = (x, y) => {\n    let pos = {\n      c: Math.max(0, Math.floor(x / (s + p))),\n      r: Math.max(0, Math.floor(y / (s + p)))\n    };\n\n    if (pos.r >= config.grid) {\n      pos.y = height + s * 2;\n      pos.x = (width - s) / 2;\n      pos.c = pos.r = null;\n    } else {\n      pos.y = Math.min(config.grid - 1, pos.r) * (s + p);\n      pos.x = Math.min(config.grid - 1, pos.c) * (s + p);\n    }\n\n    return pos;\n  };\n\n  const checkPosition = pos => {\n    // there is a BUG = flag is always true ;-()\n    const target = targetGrid[movingTarget];\n    let flag = true;\n    target.forEach(t => {\n      if (pos.c === null || pos.r === null) {\n        flag = false;\n      } else if (t[0] + pos.c >= config.grid || t[0] + pos.c < 0 || t[1] + pos.r >= config.grid || t[1] + pos.r < 0) {\n        flag = false;\n      } else if (board[t[1] + pos.r][t[0] + pos.c].free === false) {\n        flag = false;\n      }\n    });\n    return flag;\n  };\n\n  const setPosition = (pos, val) => {\n    const target = targetGrid[movingTarget];\n    target.forEach(t => {\n      board[t[1] + pos.r][t[0] + pos.c].free = val;\n    });\n    board.map(a => console.info(a.map(b => b.free ? 1 : 0).join(\",\")));\n  };\n\n  function dragstarted(event) {\n    movingTarget = +d3.select(this).attr(\"target\");\n\n    if (movingTarget !== currentTargetNr) {\n      movingTarget = null;\n    }\n  }\n\n  function dragged(event) {\n    if (movingTarget === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    moveTarget(pos.x, pos.y);\n    drawnTargets[movingTarget].forEach(m => {\n      pos.x = Math.min(pos.x, m.attr(\"x\"));\n      pos.y = Math.min(pos.y, m.attr(\"y\"));\n    });\n    let check = checkPosition(pos);\n    drawnTargets[movingTarget].forEach(m => {\n      m.attr(\"opacity\", check === false ? 0.5 : 1);\n    });\n  }\n\n  function dragended(event) {\n    if (movingTarget === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    let check = checkPosition(pos);\n\n    if (check === true) {\n      setPosition(pos, false);\n      currentTargetNr++;\n      drawTarget();\n    } else {\n      pos = snapToGrid(width, height);\n      moveTarget(pos.x, pos.y);\n      drawnTargets[movingTarget].forEach(m => {\n        m.attr(\"opacity\", 1);\n      });\n    }\n  }\n\n  const drag = d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  d3.select(div).selectAll('*').remove();\n  const svg = d3.select(div).append(\"svg\").attr(\"width\", width + p * 2).attr(\"height\", (height + p) * 2).append(\"g\").attr(\"transform\", \"translate(\" + p + \",\" + p + \")\");\n  const board = d3.range(config.grid).map(r => d3.range(config.grid).map(c => ({\n    x: c * (s + p),\n    y: r * (s + p),\n    free: true\n  })));\n  let row = svg.selectAll(\".row\").data(board).enter().append(\"g\").attr(\"class\", \"row\");\n  row.selectAll(\".square\").data(d => d).enter().append(\"rect\").attr(\"class\", \"square\").attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", \"#fff\").style(\"stroke\", \"#444\");\n  let targetGrid = generateTargets(config.stones, Stones.length).map(t => Stones[t]);\n  let drawnTargets = [];\n  let currentTargetNr = 0,\n      movingTarget = 0;\n\n  const drawTarget = (x = (width - s) / 2, y = height + s * 2) => {\n    const target = targetGrid[currentTargetNr];\n    let stones = [];\n    target.forEach((cell, i) => {\n      let stone = svg.append(\"rect\").attr(\"class\", \"target\").attr(\"target\", currentTargetNr).attr(\"x\", cell[0] * (s + p)).attr(\"y\", cell[1] * (s + p)).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", col(target.length)).style(\"stroke\", \"#000\").attr(\"transform\", \"translate(\" + x + \",\" + y + \")\").call(drag);\n      stones.push(stone);\n    });\n    drawnTargets.push(stones);\n  };\n\n  const moveTarget = (x, y) => {\n    const target = drawnTargets[movingTarget];\n    target.forEach(t => t.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\"));\n  };\n\n  drawTarget();\n};\n\nconst Board = () => {\n  _s();\n\n  const classes = useStyles();\n  const widgetRef = useRef(null);\n  useLayoutEffect(() => {\n    draw(widgetRef.current);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.board,\n    ref: widgetRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Board, \"cFDRHWlqjeUjP2b8ZEl5Vn6bhi8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js"],"names":["Box","React","useRef","useLayoutEffect","useStyles","d3","Stones","generateTargets","N","E","length","targets","range","map","n","Math","floor","random","draw","div","config","size","grid","padding","stones","colors","s","p","width","height","col","scaleOrdinal","snapToGrid","x","y","pos","c","max","r","min","checkPosition","target","targetGrid","movingTarget","flag","forEach","t","board","free","setPosition","val","a","console","info","b","join","dragstarted","event","select","attr","currentTargetNr","dragged","moveTarget","drawnTargets","m","check","dragended","drawTarget","drag","on","selectAll","remove","svg","append","row","data","enter","d","style","cell","i","stone","call","push","Board","classes","widgetRef","current"],"mappings":"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","sourcesContent":["import { Box } from '@material-ui/core'\nimport React, {useRef, useLayoutEffect} from 'react'\n\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport Stones from './Stones'\n\nconst generateTargets = (N=20, E=Stones.length) => {\n    let targets = d3.range(N).map(n => {\n        return Math.floor(Math.random() * E)\n    })\n    return targets\n}\n\nconst draw = (div) => {\n    const config = {\n        size: 40,\n        grid: 10,\n        padding: 2,\n        stones: 43,\n        colors: [\"#66c2a5\",\"#fc8d62\",\"#8da0cb\",\"#e78ac3\",\"#a6d854\",\"#ffd92f\",\"#e5c494\",\"#b3b3b3\"]\n    }\n\n    let s = config.size, p=config.padding, width = config.grid * (s + p), height = width;\n    let col = d3.scaleOrdinal().range(config.colors)\n\n    const snapToGrid = (x, y) => {\n        let pos = {\n            c: Math.max(0, Math.floor(x / (s + p))),\n            r: Math.max(0, Math.floor(y / (s + p)))\n        }\n        if (pos.r >= config.grid) {\n            pos.y = height + s * 2\n            pos.x = (width - s) / 2\n            pos.c = pos.r = null;\n        } else {\n            pos.y = Math.min(config.grid-1, pos.r) * (s + p)\n            pos.x = Math.min(config.grid-1, pos.c) * (s + p)\n        }\n        return pos\n    }\n\n    const checkPosition = (pos) => {\n        // there is a BUG = flag is always true ;-()\n        const target = targetGrid[movingTarget]\n        let flag = true;\n        target.forEach(t => {\n            if (pos.c===null || pos.r===null){\n                flag = false\n            } else if (t[0]+pos.c >= config.grid || t[0]+pos.c < 0 || t[1]+pos.r >= config.grid || t[1]+pos.r < 0){\n                flag = false\n            } else if (board[t[1]+pos.r][t[0]+pos.c].free===false){\n                flag = false;\n            }\n        })\n        return flag;\n    }\n\n    const setPosition = (pos, val) => {\n        const target = targetGrid[movingTarget]\n        target.forEach(t => {\n            board[t[1]+pos.r][t[0]+pos.c].free = val;\n        });\n        board.map(a => console.info(a.map(b => b.free ? 1 : 0).join(\",\")))\n    }\n\n    function dragstarted(event) {\n        movingTarget = +d3.select(this).attr(\"target\");\n        if (movingTarget !== currentTargetNr){\n            movingTarget = null; \n        }\n    }\n    \n    function dragged(event) {\n        if (movingTarget===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        moveTarget(pos.x, pos.y)\n        drawnTargets[movingTarget].forEach(m => {\n            pos.x = Math.min(pos.x, m.attr(\"x\"))\n            pos.y = Math.min(pos.y, m.attr(\"y\"))\n        });\n        let check  = checkPosition(pos);\n        drawnTargets[movingTarget].forEach(m => {\n            m.attr(\"opacity\", check===false ? 0.5 : 1)\n        });\n    }\n    \n    function dragended(event) {\n        if (movingTarget===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        let check  = checkPosition(pos);\n\n        if (check===true){\n            setPosition(pos, false)\n            currentTargetNr++;\n            drawTarget();\n        } else {\n            pos = snapToGrid(width, height);\n            moveTarget(pos.x, pos.y);\n            drawnTargets[movingTarget].forEach(m => {\n                m.attr(\"opacity\", 1)\n            });\n        }\n    }\n    \n    const drag = d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n\n    d3.select(div).selectAll('*').remove();\n\n    const svg = d3.select(div).append(\"svg\")\n        .attr(\"width\", width + p * 2)\n        .attr(\"height\", (height + p) * 2)\n        .append(\"g\")\n        .attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");\n    \n    const board = d3.range(config.grid).map((r) => \n        d3.range(config.grid).map((c) => \n            ({\n                x: c * (s + p), \n                y: r * (s + p), \n                free: true \n            })));\n\n    let row = svg.selectAll(\".row\")\n        .data(board)\n        .enter().append(\"g\")\n        .attr(\"class\", \"row\");\n\n    row.selectAll(\".square\")\n        .data((d) => d)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"square\")\n        .attr(\"x\", (d) => d.x )\n        .attr(\"y\", (d) => d.y )\n        .attr(\"width\", s )\n        .attr(\"height\", s )\n        .attr(\"rx\", s/10)\n        .attr(\"ry\", s/10)\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#444\");\n    \n    let targetGrid = generateTargets(config.stones, Stones.length).map(t => Stones[t])\n    let drawnTargets = [];\n    let currentTargetNr = 0, movingTarget = 0;\n\n    const drawTarget = (x = (width - s) / 2, y = height + s * 2) => {\n        const target = targetGrid[currentTargetNr];\n        let stones = []\n        target.forEach((cell, i) => {\n            let stone = svg.append(\"rect\")\n                .attr(\"class\",\"target\")\n                .attr(\"target\", currentTargetNr)\n                .attr(\"x\", cell[0] * (s + p) )\n                .attr(\"y\", cell[1] * (s + p))\n                .attr(\"width\", s )\n                .attr(\"height\", s )\n                .attr(\"rx\", s/10)\n                .attr(\"ry\", s/10)\n                .style(\"fill\", col(target.length))\n                .style(\"stroke\", \"#000\")\n                .attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\")\n                .call(drag);\n                stones.push(stone)\n        })\n        drawnTargets.push(stones)\n    }\n\n    const moveTarget = (x, y) => {\n        const target = drawnTargets[movingTarget];\n        target.forEach(t => t.attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\"));\n    }\n\n    drawTarget();\n    \n}\n\nconst Board = () => {\n    const classes = useStyles();\n    const widgetRef = useRef(null);\n\n    useLayoutEffect(() => {\n        \n        draw(widgetRef.current);\n        \n    });\n\n    return <Box className={classes.board} ref={widgetRef}>\n        \n    </Box>\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}