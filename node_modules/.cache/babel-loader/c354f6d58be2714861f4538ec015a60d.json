{"ast":null,"code":"import * as d3 from 'd3';\nexport default Stones = [{\n  stone: [[0, 0]]\n}, {\n  stone: [[0, 0], [0, 1]]\n}, {\n  stone: [[0, 0], [1, 0]]\n}, {\n  stone: [[0, 0], [0, 1], [0, 2]]\n}, {\n  stone: [[0, 0], [1, 0], [2, 0]]\n}, {\n  stone: [[0, 0], [1, 0], [1, 1]]\n}, {\n  stone: [[0, 0], [1, 0], [0, 1]]\n}, {\n  stone: [[0, 0], [0, 1], [1, 1]]\n}, {\n  stone: [[1, 0], [1, 1], [0, 1]]\n}, {\n  stone: [[0, 0], [0, 1], [0, 2], [0, 3]]\n}, {\n  stone: [[0, 0], [1, 0], [2, 0], [3, 0]]\n}, {\n  stone: [[0, 0], [0, 1], [1, 0], [1, 1]]\n}, {\n  stone: [[0, 0], [0, 1], [0, 2], [1, 2]]\n}, {\n  stone: [[1, 0], [1, 1], [1, 2], [0, 2]]\n}, {\n  stone: [[0, 0], [1, 0], [0, 1], [2, 0]]\n}, {\n  stone: [[0, 0], [1, 0], [2, 0], [2, 1]]\n}, {\n  stone: [[1, 0], [1, 1], [1, 2], [0, 1]]\n}, {\n  stone: [[0, 0], [0, 1], [0, 2], [1, 1]]\n}, {\n  stone: [[1, 0], [0, 1], [1, 1], [2, 1]]\n}, {\n  stone: [[0, 0], [1, 0], [2, 0], [1, 1]]\n}, {\n  stone: [[0, 1], [1, 0], [1, 1], [2, 0]]\n}, {\n  stone: [[0, 0], [1, 0], [1, 1], [2, 1]]\n}, {\n  stone: [[0, 0], [1, 0], [2, 0], [0, 1], [1, 1], [2, 1], [0, 2], [1, 2], [2, 2]]\n}];\nexport const generateStones = N => {\n  let stn = d3.range(N).map(n => {\n    return Math.floor(Math.random() * Stones.length);\n  });\n  return stn;\n};","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Stones.js"],"names":["d3","Stones","stone","generateStones","N","stn","range","map","n","Math","floor","random","length"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nexport default Stones = [\n    {stone:[[0,0]]},\n\n    {stone:[[0,0],[0,1]]}, \n    {stone:[[0,0],[1,0]]},\n\n    {stone:[[0,0],[0,1],[0,2]]},\n    {stone:[[0,0],[1,0],[2,0]]},\n    {stone:[[0,0],[1,0],[1,1]]},\n    {stone:[[0,0],[1,0],[0,1]]},\n    {stone:[[0,0],[0,1],[1,1]]},\n    {stone:[[1,0],[1,1],[0,1]]},\n\n    {stone:[[0,0],[0,1],[0,2],[0,3]]},\n    {stone:[[0,0],[1,0],[2,0],[3,0]]},\n    {stone:[[0,0],[0,1],[1,0],[1,1]]},\n    {stone:[[0,0],[0,1],[0,2],[1,2]]},\n    {stone:[[1,0],[1,1],[1,2],[0,2]]},\n    {stone:[[0,0],[1,0],[0,1],[2,0]]},\n    {stone:[[0,0],[1,0],[2,0],[2,1]]},\n    \n    {stone:[[1,0],[1,1],[1,2],[0,1]]},\n    {stone:[[0,0],[0,1],[0,2],[1,1]]},\n    {stone:[[1,0],[0,1],[1,1],[2,1]]},\n    {stone:[[0,0],[1,0],[2,0],[1,1]]},\n\n    {stone:[[0,1],[1,0],[1,1],[2,0]]},\n    {stone:[[0,0],[1,0],[1,1],[2,1]]},\n\n    {stone:[[0,0],[1,0],[2,0],[0,1],[1,1],[2,1],[0,2],[1,2],[2,2]]}\n]\n\nexport const generateStones = (N) => {\n    let stn = d3.range(N).map(n => {\n        return Math.floor(Math.random() * Stones.length)\n    })\n    return stn\n}"]},"metadata":{},"sourceType":"module"}