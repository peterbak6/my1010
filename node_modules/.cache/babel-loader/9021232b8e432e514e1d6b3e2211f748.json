{"ast":null,"code":"var _jsxFileName = \"/Users/peterbak/Documents/game1010/src/widgets/Board.js\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@material-ui/core';\nimport React, { useRef, useLayoutEffect } from 'react';\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst draw = (div, config, handleGameChange) => {\n  let s = config.size,\n      p = config.padding,\n      width = config.grid * (s + p),\n      height = width;\n  let col = d3.scaleOrdinal().range(config.colors);\n  const board = d3.range(config.grid).map(r => d3.range(config.grid).map(c => ({\n    x: c * (s + p),\n    y: r * (s + p),\n    free: true\n  })));\n  let stones = generateStones(config.stones),\n      drawnStones = [],\n      stoneCodes = {},\n      currentStoneNrs = [],\n      currentStoneStartpost = {\n    x: 0,\n    y: 0\n  },\n      stonesLayed = 0,\n      movingStone = 0;\n\n  const removeCell = cell => {\n    cell.stone.transition().duration(500).attr(\"x\", s / 2).attr(\"y\", s / 2).attr(\"height\", 0).attr(\"width\", 0).remove();\n    cell['stone'] = null;\n    cell.free = true;\n  };\n\n  const checkRowColFull = () => {\n    let fullRow = [],\n        fullColumn = [];\n\n    for (let r = 0; r < config.grid; r++) {\n      let cRow = board[r].every(c => !c.free);\n      let cCol = board.map(b => b[r]).every(c => !c.free);\n\n      if (cRow) {\n        fullRow.push(r);\n      }\n\n      if (cCol) {\n        fullColumn.push(r);\n      }\n    }\n\n    fullRow.forEach(row => {\n      board[row].forEach(cell => {\n        removeCell(cell);\n      });\n    });\n    fullColumn.forEach(col => {\n      board.forEach(row => {\n        let cell = row[col];\n        removeCell(cell);\n      });\n    });\n    return (fullRow.length + fullColumn.length) * config.grid;\n  };\n\n  const snapToGrid = (x, y) => {\n    let pos = {\n      c: Math.max(0, Math.floor(x / (s + p))),\n      r: Math.max(0, Math.floor(y / (s + p)))\n    };\n\n    if (pos.r >= config.grid) {\n      //TODO: position to the origianl position !  !  !\n      pos.y = currentStoneStartpost.y; //height + s * 2\n\n      pos.x = currentStoneStartpost.x; //(width - s) / 2\n\n      pos.c = pos.r = null;\n    } else {\n      pos.y = Math.min(config.grid - 1, pos.r) * (s + p);\n      pos.x = Math.min(config.grid - 1, pos.c) * (s + p);\n    }\n\n    return pos;\n  };\n\n  const checkPositionFree = (pos, codes) => {\n    let flag = true;\n    codes.forEach(t => {\n      if (pos.c === null || pos.r === null) {\n        flag = false;\n      } else if (t[0] + pos.c >= config.grid || t[0] + pos.c < 0 || t[1] + pos.r >= config.grid || t[1] + pos.r < 0) {\n        flag = false;\n      } else if (board[t[1] + pos.r][t[0] + pos.c].free === false) {\n        flag = false;\n      }\n    });\n    return flag;\n  };\n\n  const setPosition = (pos, val, codes, stn) => {\n    codes.forEach((t, i) => {\n      board[t[1] + pos.r][t[0] + pos.c].free = val;\n      board[t[1] + pos.r][t[0] + pos.c].stone = stn[i];\n    });\n  };\n\n  const moveStone = (x, y, stn) => {\n    stn.forEach(t => t.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\"));\n  };\n\n  let drawnPiecePos = 0;\n\n  const drawStonePieces = (stn, color, index) => {\n    let pieces = [];\n    let stoneWidth = d3.max(stn.map(s => s[0]));\n    let stoneHeight = d3.max(stn.map(s => s[1]));\n    let stonePosY = height + s * 2;\n    let stonePosX = drawnPiecePos * (s + p);\n\n    if (stonePosX > width - stoneWidth * (s + p)) {\n      stonePosY = height + s * 4;\n      stonePosX = width - stoneWidth * (s + p);\n    }\n\n    let gPieces = svg.append(\"g\");\n    stn.forEach(cell => {\n      let piece = gPieces.append(\"rect\").attr(\"class\", \"stn\").attr(\"stn\", index).attr(\"row\", cell[1]).attr(\"col\", cell[0]).attr(\"x\", cell[0] * (s + p)).attr(\"y\", cell[1] * (s + p)).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", 1).attr(\"ry\", 1).style(\"fill\", col(color)).style(\"fill-opacity\", 0.75).style(\"stroke\", \"#000\").attr(\"pointer-events\", \"none\").attr(\"transform\", \"translate(\" + (stonePosX + 2) + \",\" + stonePosY + \")\"); // .call(drag);\n\n      pieces.push(piece);\n    });\n    gPieces.append('rect').attr(\"class\", \"draghandler\").attr(\"x\", stonePosX).attr(\"y\", stonePosY).attr(\"width\", (stoneWidth + 1) * (s + p)).attr(\"height\", (stoneHeight + 1) * (s + p)).attr(\"fill-opacity\", 0).call(drag);\n    drawnPiecePos += stoneWidth + 2;\n    return pieces;\n  };\n\n  const drawStone = () => {\n    if (currentStoneNrs.length > 0) {\n      return;\n    }\n\n    stones = generateStones(config.stones);\n    drawnPiecePos = 0;\n\n    for (let i = 0, I = stones.length; i < I; i++) {\n      const stn = stones.shift();\n      stoneCodes[stonesLayed] = stn.stone;\n      let pieces = drawStonePieces(stn.stone, stn.type, stonesLayed);\n      drawnStones.push(pieces);\n      currentStoneNrs.push(stonesLayed);\n      stonesLayed++;\n    }\n  };\n\n  function dragstarted(event) {\n    movingStone = +d3.select(this).attr(\"stn\");\n    let pos = {\n      x: event.x,\n      y: event.y\n    };\n    let stn = drawnStones[movingStone];\n    let offset = {\n      x: svg.node().getBoundingClientRect().x,\n      y: svg.node().getBoundingClientRect().y\n    };\n    stn.forEach(s => {\n      pos.x = Math.min(pos.x, s.node().getBoundingClientRect().x - offset.x);\n      pos.y = Math.min(pos.y, s.node().getBoundingClientRect().y - offset.y);\n    });\n    currentStoneStartpost = pos;\n\n    if (currentStoneNrs.indexOf(movingStone) < 0) {\n      movingStone = null;\n    }\n  }\n\n  function dragged(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let stn = drawnStones[movingStone];\n    let stnCode = stoneCodes[movingStone];\n    let pos = snapToGrid(event.x, event.y);\n    moveStone(pos.x, pos.y, stn);\n    let check = checkPositionFree(pos, stnCode);\n    stn.forEach(m => {\n      m.style(\"fill-opacity\", check === false ? 0.25 : 0.75);\n    });\n  }\n\n  function dragended(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let stn = drawnStones[movingStone];\n    let stnCode = stoneCodes[movingStone];\n    let pos = snapToGrid(event.x, event.y);\n    let check = checkPositionFree(pos, stnCode);\n\n    if (check === true) {\n      setPosition(pos, false, stnCode, stn);\n      currentStoneNrs.splice(currentStoneNrs.indexOf(movingStone), 1);\n      let points = checkRowColFull();\n      handleGameChange('points', points);\n      drawStone();\n    } else {\n      pos = snapToGrid(width, height);\n      moveStone(pos.x, pos.y, stn);\n      stn.forEach(m => {\n        m.style(\"fill-opacity\", 0.75);\n      });\n    }\n  }\n\n  const drag = d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  d3.select(div).selectAll('*').remove();\n  const svg = d3.select(div).append(\"svg\").attr(\"width\", width + p * 2).attr(\"height\", (height + p) * 2).append(\"g\").attr(\"transform\", \"translate(\" + p + \",\" + p + \")\");\n  let row = svg.selectAll(\".row\").data(board).enter().append(\"g\").attr(\"class\", \"row\");\n  row.selectAll(\".square\").data(d => d).enter().append(\"rect\").attr(\"class\", \"board\").attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / config.size).attr(\"ry\", s / config.size).style(\"fill\", \"#fff\").style(\"stroke\", \"#a2a2a2\");\n  drawStone();\n};\n\nconst Board = ({\n  config,\n  points,\n  handleChange\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const widgetRef = useRef(null);\n\n  const handleGameChange = (key, value) => {\n    handleChange(key, value);\n  };\n\n  useLayoutEffect(() => {\n    if (points > 0) {\n      return;\n    }\n\n    draw(widgetRef.current, config, handleGameChange);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.board,\n    ref: widgetRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Board, \"cFDRHWlqjeUjP2b8ZEl5Vn6bhi8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/peterbak/Documents/game1010/src/widgets/Board.js"],"names":["Box","React","useRef","useLayoutEffect","useStyles","d3","generateStones","draw","div","config","handleGameChange","s","size","p","padding","width","grid","height","col","scaleOrdinal","range","colors","board","map","r","c","x","y","free","stones","drawnStones","stoneCodes","currentStoneNrs","currentStoneStartpost","stonesLayed","movingStone","removeCell","cell","stone","transition","duration","attr","remove","checkRowColFull","fullRow","fullColumn","cRow","every","cCol","b","push","forEach","row","length","snapToGrid","pos","Math","max","floor","min","checkPositionFree","codes","flag","t","setPosition","val","stn","i","moveStone","drawnPiecePos","drawStonePieces","color","index","pieces","stoneWidth","stoneHeight","stonePosY","stonePosX","gPieces","svg","append","piece","style","call","drag","drawStone","I","shift","type","dragstarted","event","select","offset","node","getBoundingClientRect","indexOf","dragged","stnCode","check","m","dragended","splice","points","on","selectAll","data","enter","d","Board","handleChange","classes","widgetRef","key","value","current"],"mappings":"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","sourcesContent":["import { Box } from '@material-ui/core'\nimport React, {useRef, useLayoutEffect} from 'react'\n\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones'\n\nconst draw = (div, config, handleGameChange) => {\n    \n    let s = config.size, p=config.padding, width = config.grid * (s + p), height = width;\n    let col = d3.scaleOrdinal().range(config.colors);\n\n    const board = d3.range(config.grid).map((r) => \n        d3.range(config.grid).map((c) => \n            ({\n                x: c * (s + p), \n                y: r * (s + p), \n                free: true \n            })));\n\n    let stones = generateStones(config.stones), \n        drawnStones = [], \n        stoneCodes = {},\n        currentStoneNrs = [], \n        currentStoneStartpost = {x:0, y:0},\n        stonesLayed = 0, \n        movingStone = 0;\n\n    const removeCell = (cell) => {\n        cell.stone.transition().duration(500)\n            .attr(\"x\",s / 2).attr(\"y\", s / 2)\n            .attr(\"height\", 0).attr(\"width\",0).remove();\n        cell['stone'] = null;\n        cell.free = true;\n    }\n\n    const checkRowColFull = () => {\n        let fullRow = [], fullColumn = [];\n        for (let r = 0; r < config.grid; r++){\n            let cRow = board[r].every(c=>!c.free);\n            let cCol = board.map(b => b[r]).every(c=>!c.free);\n            if (cRow) {\n                fullRow.push(r);\n            }\n            if (cCol) {\n                fullColumn.push(r);\n            }\n        }\n        fullRow.forEach(row => {\n            board[row].forEach(cell => {\n                removeCell(cell)\n            })\n        })\n        fullColumn.forEach(col => {\n            board.forEach(row => {\n                let cell = row[col]\n                removeCell(cell);\n            })\n        })\n        return (fullRow.length + fullColumn.length) * config.grid;\n    }\n        \n    const snapToGrid = (x, y) => {\n        let pos = {\n            c: Math.max(0, Math.floor(x / (s + p))),\n            r: Math.max(0, Math.floor(y / (s + p)))\n        }\n        if (pos.r >= config.grid) {\n            //TODO: position to the origianl position !  !  !\n            pos.y = currentStoneStartpost.y; //height + s * 2\n            pos.x = currentStoneStartpost.x; //(width - s) / 2\n            pos.c = pos.r = null;\n        } else {\n            pos.y = Math.min(config.grid-1, pos.r) * (s + p)\n            pos.x = Math.min(config.grid-1, pos.c) * (s + p)\n        }\n        return pos\n    }\n\n    const checkPositionFree = (pos, codes) => {\n        let flag = true;\n        codes.forEach(t => {\n            if (pos.c===null || pos.r===null){\n                flag = false\n            } else if (t[0]+pos.c >= config.grid || t[0]+pos.c < 0 || t[1]+pos.r >= config.grid || t[1]+pos.r < 0){\n                flag = false\n            } else if (board[t[1]+pos.r][t[0]+pos.c].free===false){\n                flag = false;\n            }\n        })\n        return flag;\n    }\n\n    const setPosition = (pos, val, codes, stn) => {\n        codes.forEach((t,i) => {\n            board[t[1]+pos.r][t[0]+pos.c].free = val;\n            board[t[1]+pos.r][t[0]+pos.c].stone = stn[i];\n        });\n    }\n\n    const moveStone = (x, y, stn) => {\n        stn.forEach(t => t.attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\"));\n    }\n\n    let drawnPiecePos = 0;\n    const drawStonePieces  = (stn, color, index) => {\n        let pieces = []\n        let stoneWidth = d3.max(stn.map(s => s[0]));\n        let stoneHeight = d3.max(stn.map(s => s[1]));\n        let stonePosY = height + s * 2\n        let stonePosX = drawnPiecePos * (s + p);\n        if (stonePosX > width - stoneWidth * (s + p)){\n            stonePosY = height + s * 4\n            stonePosX = width - stoneWidth * (s + p)\n        }\n        let gPieces = svg.append(\"g\")\n        stn.forEach((cell) => {\n            let piece = gPieces.append(\"rect\")\n                .attr(\"class\",\"stn\")\n                .attr(\"stn\", index)\n                .attr(\"row\", cell[1])\n                .attr(\"col\", cell[0])\n                .attr(\"x\", cell[0] * (s + p) )\n                .attr(\"y\", cell[1] * (s + p))\n                .attr(\"width\", s )\n                .attr(\"height\", s )\n                .attr(\"rx\", 1)\n                .attr(\"ry\", 1)\n                .style(\"fill\", col(color))\n                .style(\"fill-opacity\", 0.75)\n                .style(\"stroke\", \"#000\")\n                .attr(\"pointer-events\", \"none\")\n                .attr(\"transform\",\"translate(\"+(stonePosX + 2)+\",\"+(stonePosY)+\")\")\n                // .call(drag);\n            pieces.push(piece)\n        })\n        gPieces.append('rect')\n            .attr(\"class\", \"draghandler\")\n            .attr(\"x\", stonePosX)\n            .attr(\"y\", stonePosY)\n            .attr(\"width\", (stoneWidth + 1)  * (s + p))\n            .attr(\"height\", (stoneHeight + 1) * (s + p))\n            .attr(\"fill-opacity\", 0)\n            .call(drag);\n        drawnPiecePos += stoneWidth + 2;\n        return pieces;\n    }\n \n    const drawStone = () => {\n        if (currentStoneNrs.length>0){ return }\n\n        stones = generateStones(config.stones);\n        drawnPiecePos = 0;\n        for (let i = 0, I = stones.length; i < I; i++){\n            const stn = stones.shift();\n            stoneCodes[stonesLayed] = stn.stone;\n            let pieces = drawStonePieces(stn.stone, stn.type, stonesLayed);\n            drawnStones.push(pieces);\n            currentStoneNrs.push(stonesLayed);\n            stonesLayed++;\n        }\n    }\n\n    function dragstarted(event) {\n        movingStone = +d3.select(this).attr(\"stn\");\n        let pos = {x: event.x, y: event.y}\n        let stn = drawnStones[movingStone];\n        let offset = {x: svg.node().getBoundingClientRect().x, \n            y: svg.node().getBoundingClientRect().y};\n        stn.forEach(s => {\n            pos.x = Math.min(pos.x, s.node().getBoundingClientRect().x - offset.x)\n            pos.y = Math.min(pos.y, s.node().getBoundingClientRect().y - offset.y) \n        });\n        currentStoneStartpost = pos;\n        if (currentStoneNrs.indexOf(movingStone) < 0){ \n            movingStone = null; \n        }\n    }\n    \n    function dragged(event) {\n        if (movingStone===null){return;}\n        let stn = drawnStones[movingStone]\n        let stnCode = stoneCodes[movingStone]\n        let pos = snapToGrid(event.x, event.y);\n        moveStone(pos.x, pos.y, stn)\n        let check  = checkPositionFree(pos, stnCode);\n        stn.forEach(m => {\n            m.style(\"fill-opacity\", check===false ? 0.25 : 0.75)\n        });\n    }\n    \n    function dragended(event) {\n        if (movingStone===null){return;}\n        let stn = drawnStones[movingStone]\n        let stnCode = stoneCodes[movingStone]\n        let pos = snapToGrid(event.x, event.y);\n        let check  = checkPositionFree(pos, stnCode);\n\n        if (check===true){\n            setPosition(pos, false, stnCode, stn)\n            currentStoneNrs.splice(currentStoneNrs.indexOf(movingStone), 1);\n            let points = checkRowColFull();\n            handleGameChange('points', points);\n            drawStone();\n        } else {\n            pos = snapToGrid(width, height);\n            moveStone(pos.x, pos.y, stn);\n            stn.forEach(m => {\n                m.style(\"fill-opacity\", 0.75)\n            });\n        }\n    }\n    \n    const drag = d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n\n    d3.select(div).selectAll('*').remove();\n\n    const svg = d3.select(div).append(\"svg\")\n        .attr(\"width\", width + p * 2)\n        .attr(\"height\", (height + p) * 2)\n        .append(\"g\")\n        .attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");\n\n    let row = svg.selectAll(\".row\")\n        .data(board)\n        .enter().append(\"g\")\n        .attr(\"class\", \"row\");\n\n    row.selectAll(\".square\")\n        .data((d) => d)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"board\")\n        .attr(\"x\", (d) => d.x )\n        .attr(\"y\", (d) => d.y )\n        .attr(\"width\", s )\n        .attr(\"height\", s )\n        .attr(\"rx\", s/config.size)\n        .attr(\"ry\", s/config.size)\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#a2a2a2\");\n\n    drawStone();\n    \n}\n\nconst Board = ({config, points, handleChange}) => {\n    const classes = useStyles();\n    const widgetRef = useRef(null);\n\n    const handleGameChange = (key, value) => {\n        handleChange(key, value);\n    }\n\n    useLayoutEffect(() => {\n        if (points > 0){ return; }\n        draw(widgetRef.current, config, handleGameChange);\n    });\n\n    return <Box className={classes.board} ref={widgetRef}></Box>\n\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}