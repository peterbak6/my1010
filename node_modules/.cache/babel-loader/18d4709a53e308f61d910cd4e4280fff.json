{"ast":null,"code":"var _jsxFileName = \"/Users/peterbak/Documents/GitHub/game1010/game1010/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { Box } from '@material-ui/core';\nimport React, { useEffect } from 'react';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport useStyles from './style';\nimport Board from './widgets/Board';\nimport { useState, useCallback } from 'react';\nimport { Refresh } from './widgets/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const classes = useStyles();\n  const [user, setUser] = useState('');\n  const [points, setPoints] = useState(localStorage.getItem('points') || 0);\n  useEffect(() => {\n    localStorage.setItem(\"points\", points);\n  }, [points]);\n  const handleChange = useCallback((key, value) => {\n    if (value === 0 || key !== 'points') {\n      return;\n    }\n\n    setPoints(p => p + value);\n  }, []);\n  const config = {\n    size: 40,\n    grid: 10,\n    padding: 2,\n    stones: 3,\n    colors: [\"#8dd3c7\", \"#ffffb3\", \"#bebada\", \"#fb8072\", \"#80b1d3\", \"#fdb462\", \"#b3de69\", \"#fccde5\", \"#d9d9d9\", \"#bc80bd\", \"#ccebc5\", \"#ffed6f\"],\n    colors1: [\"#66c2a5\", \"#fc8d62\", \"#8da0cb\", \"#e78ac3\", \"#a6d854\", \"#ffd92f\", \"#e5c494\", \"#b3b3b3\"]\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: classes.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: classes.h2,\n        children: \"My 1010\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n        value: user,\n        onChange: (event, newValue) => {\n          if (typeof newValue === 'string') {\n            setValue({\n              title: newValue\n            });\n          } else if (newValue && newValue.inputValue) {\n            // Create a new value from the user input\n            setValue({\n              title: newValue.inputValue\n            });\n          } else {\n            setValue(newValue);\n          }\n        },\n        selectOnFocus: true,\n        clearOnBlur: true,\n        handleHomeEndKeys: true,\n        options: ['Peter'],\n        getOptionLabel: option => {\n          // Value selected with enter, right from the input\n          if (typeof option === 'string') {\n            return option;\n          } // Add \"xxx\" option created dynamically\n\n\n          if (option.inputValue) {\n            return option.inputValue;\n          } // Regular option\n\n\n          return option.title;\n        },\n        renderOption: option => option.title,\n        style: {\n          width: 300\n        },\n        freeSolo: true,\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          label: \"User Name\",\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes.h3,\n        children: [\"Points: \", points]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.refresh,\n        children: /*#__PURE__*/_jsxDEV(Refresh, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      config: config,\n      points: points,\n      handleChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"zbzsHzszZ4U5NM3XuDNqhlH2zPw=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/App.js"],"names":["Box","React","useEffect","Autocomplete","useStyles","Board","useState","useCallback","Refresh","App","classes","user","setUser","points","setPoints","localStorage","getItem","setItem","handleChange","key","value","p","config","size","grid","padding","stones","colors","colors1","root","header","h2","event","newValue","setValue","title","inputValue","option","width","params","h3","refresh"],"mappings":"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","sourcesContent":["import './App.css';\nimport {Box} from '@material-ui/core'\nimport React, { useEffect } from 'react';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport useStyles from './style';\nimport Board from './widgets/Board'\nimport { useState , useCallback} from 'react';\nimport {Refresh} from './widgets/utils';\n\nfunction App() {\n  const classes = useStyles();\n  const [user, setUser] = useState('')\n  const [points, setPoints] = useState(localStorage.getItem('points') || 0);\n\n  useEffect(()=>{\n    localStorage.setItem(\"points\", points);\n  }, [points]);\n\n  const handleChange = useCallback((key, value) => {\n    if (value===0 || key!=='points'){ return; }\n    setPoints(p => p + value);\n  },[]);\n\n  const config = {\n    size: 40,\n    grid: 10,\n    padding: 2,\n    stones: 3,\n    colors: [\"#8dd3c7\",\"#ffffb3\",\"#bebada\",\"#fb8072\",\"#80b1d3\",\"#fdb462\",\"#b3de69\",\"#fccde5\",\"#d9d9d9\",\"#bc80bd\",\"#ccebc5\",\"#ffed6f\"],\n    colors1: [\"#66c2a5\",\"#fc8d62\",\"#8da0cb\",\"#e78ac3\",\"#a6d854\",\"#ffd92f\",\"#e5c494\",\"#b3b3b3\"]\n  }\n\n  return (\n    <Box className={classes.root}>\n      <header className={classes.header}>\n        <h2 className={classes.h2}>\n          My 1010\n        </h2>\n        <Autocomplete\n          value={user}\n          onChange={(event, newValue) => {\n            if (typeof newValue === 'string') {\n              setValue({\n                title: newValue,\n              });\n            } else if (newValue && newValue.inputValue) {\n              // Create a new value from the user input\n              setValue({\n                title: newValue.inputValue,\n              });\n            } else {\n              setValue(newValue);\n            }\n          }}\n          selectOnFocus\n          clearOnBlur\n          handleHomeEndKeys\n          options={['Peter']}\n          getOptionLabel={(option) => {\n            // Value selected with enter, right from the input\n            if (typeof option === 'string') {\n              return option;\n            }\n            // Add \"xxx\" option created dynamically\n            if (option.inputValue) {\n              return option.inputValue;\n            }\n            // Regular option\n            return option.title;\n          }}\n          renderOption={(option) => option.title}\n          style={{ width: 300 }}\n          freeSolo\n          renderInput={(params) => (\n            <TextField {...params} label=\"User Name\" variant=\"outlined\" />\n          )}\n        />\n        <h3 className={classes.h3}>Points: {points}</h3>\n        <Box className={classes.refresh}>\n          <Refresh/>\n      </Box>\n      </header>\n      <Board config={config} points={points} handleChange={handleChange}/>\n    </Box>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}