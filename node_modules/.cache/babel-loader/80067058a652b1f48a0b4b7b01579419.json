{"ast":null,"code":"var _jsxFileName = \"/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@material-ui/core';\nimport React, { useRef, useLayoutEffect } from 'react';\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst draw = (div, config, handleGameChange) => {\n  let s = config.size,\n      p = config.padding,\n      width = config.grid * (s + p),\n      height = width;\n  let col = d3.scaleOrdinal().range(config.colors);\n  const board = d3.range(config.grid).map(r => d3.range(config.grid).map(c => ({\n    x: c * (s + p),\n    y: r * (s + p),\n    free: true\n  })));\n  let stones = generateStones(config.stones);\n  let drawnStones = [];\n  let currentStoneNr = 0,\n      movingStone = 0,\n      round = 0;\n\n  const snapToGrid = (x, y) => {\n    let pos = {\n      c: Math.max(0, Math.floor(x / (s + p))),\n      r: Math.max(0, Math.floor(y / (s + p)))\n    };\n\n    if (pos.r >= config.grid) {\n      pos.y = height + s * 2;\n      pos.x = (width - s) / 2;\n      pos.c = pos.r = null;\n    } else {\n      pos.y = Math.min(config.grid - 1, pos.r) * (s + p);\n      pos.x = Math.min(config.grid - 1, pos.c) * (s + p);\n    }\n\n    return pos;\n  };\n\n  const checkPosition = pos => {\n    const stn = stones[movingStone].stone;\n    let flag = true;\n    stn.forEach(t => {\n      if (pos.c === null || pos.r === null) {\n        flag = false;\n      } else if (t[0] + pos.c >= config.grid || t[0] + pos.c < 0 || t[1] + pos.r >= config.grid || t[1] + pos.r < 0) {\n        flag = false;\n      } else if (board[t[1] + pos.r][t[0] + pos.c].free === false) {\n        flag = false;\n      }\n    });\n    return flag;\n  };\n\n  const moveStone = (x, y) => {\n    const stn = drawnStones[movingStone];\n    stn.forEach(t => t.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\"));\n  };\n\n  const setPosition = (pos, val) => {\n    const stn = stones[movingStone].stone;\n    stn.forEach(t => {\n      board[t[1] + pos.r][t[0] + pos.c].free = val;\n    });\n    board.map(a => console.info(a.map(b => b.free ? 1 : 0).join(\",\")));\n  };\n\n  function dragstarted(event) {\n    movingStone = +d3.select(this).attr(\"stn\");\n\n    if (movingStone !== currentStoneNr) {\n      movingStone = null;\n    }\n  }\n\n  function dragged(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    moveStone(pos.x, pos.y);\n    drawnStones[movingStone].forEach(m => {\n      pos.x = Math.min(pos.x, m.attr(\"x\"));\n      pos.y = Math.min(pos.y, m.attr(\"y\"));\n    });\n    let check = checkPosition(pos);\n    drawnStones[movingStone].forEach(m => {\n      m.attr(\"opacity\", check === false ? 0.5 : 1);\n    });\n  }\n\n  function dragended(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    let check = checkPosition(pos);\n\n    if (check === true) {\n      setPosition(pos, false);\n      currentStoneNr++;\n      drawStone();\n    } else {\n      pos = snapToGrid(width, height);\n      moveStone(pos.x, pos.y);\n      drawnStones[movingStone].forEach(m => {\n        m.attr(\"opacity\", 1);\n      });\n    }\n  }\n\n  const drag = d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  d3.select(div).selectAll('*').remove();\n  const svg = d3.select(div).append(\"svg\").attr(\"width\", width + p * 2).attr(\"height\", (height + p) * 2).append(\"g\").attr(\"transform\", \"translate(\" + p + \",\" + p + \")\");\n  let row = svg.selectAll(\".row\").data(board).enter().append(\"g\").attr(\"class\", \"row\");\n  row.selectAll(\".square\").data(d => d).enter().append(\"rect\").attr(\"class\", \"square\").attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", \"#fff\").style(\"stroke\", \"#444\");\n\n  const drawStone = (x = (width - s) / 2, y = height + s * 2) => {\n    const stn = stones[currentStoneNr].stone;\n    const color = stones[currentStoneNr].type;\n\n    if (currentStoneNr === config.stones) {\n      stones = generateStones(config.stones);\n      currentStoneNr = 0;\n      round++;\n      handleGameChange('round', round + 1);\n    }\n\n    let pieces = [];\n    stn.forEach((cell, i) => {\n      let piece = svg.append(\"rect\").attr(\"class\", \"stn\").attr(\"stn\", currentStoneNr).attr(\"x\", cell[0] * (s + p)).attr(\"y\", cell[1] * (s + p)).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", col(color)).style(\"stroke\", \"#000\").attr(\"transform\", \"translate(\" + x + \",\" + y + \")\").call(drag);\n      pieces.push(piece);\n    });\n    drawnStones.push(pieces);\n    handleGameChange('step', currentStoneNr + 1);\n  };\n\n  drawStone();\n};\n\nconst Board = ({\n  config,\n  game,\n  handleChange\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const widgetRef = useRef(null);\n\n  const handleGameChange = (key, value) => {\n    if (game.step > 1 || game.round > 1) {\n      return;\n    }\n\n    handleChange(key, value);\n  };\n\n  useLayoutEffect(() => {\n    draw(widgetRef.current, config, handleGameChange);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.board,\n    ref: widgetRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Board, \"cFDRHWlqjeUjP2b8ZEl5Vn6bhi8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js"],"names":["Box","React","useRef","useLayoutEffect","useStyles","d3","generateStones","draw","div","config","handleGameChange","s","size","p","padding","width","grid","height","col","scaleOrdinal","range","colors","board","map","r","c","x","y","free","stones","drawnStones","currentStoneNr","movingStone","round","snapToGrid","pos","Math","max","floor","min","checkPosition","stn","stone","flag","forEach","t","moveStone","attr","setPosition","val","a","console","info","b","join","dragstarted","event","select","dragged","m","check","dragended","drawStone","drag","on","selectAll","remove","svg","append","row","data","enter","d","style","color","type","pieces","cell","i","piece","call","push","Board","game","handleChange","classes","widgetRef","key","value","step","current"],"mappings":"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","sourcesContent":["import { Box } from '@material-ui/core'\nimport React, {useRef, useLayoutEffect} from 'react'\n\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones'\n\nconst draw = (div, config, handleGameChange) => {\n    \n    let s = config.size, p=config.padding, width = config.grid * (s + p), height = width;\n    let col = d3.scaleOrdinal().range(config.colors);\n\n    const board = d3.range(config.grid).map((r) => \n        d3.range(config.grid).map((c) => \n            ({\n                x: c * (s + p), \n                y: r * (s + p), \n                free: true \n            })));\n\n    let stones = generateStones(config.stones)\n    let drawnStones = [];\n    let currentStoneNr = 0, movingStone = 0, round=0;\n        \n    const snapToGrid = (x, y) => {\n        let pos = {\n            c: Math.max(0, Math.floor(x / (s + p))),\n            r: Math.max(0, Math.floor(y / (s + p)))\n        }\n        if (pos.r >= config.grid) {\n            pos.y = height + s * 2\n            pos.x = (width - s) / 2\n            pos.c = pos.r = null;\n        } else {\n            pos.y = Math.min(config.grid-1, pos.r) * (s + p)\n            pos.x = Math.min(config.grid-1, pos.c) * (s + p)\n        }\n        return pos\n    }\n\n    const checkPosition = (pos) => {\n        const stn = stones[movingStone].stone\n        let flag = true;\n        stn.forEach(t => {\n            if (pos.c===null || pos.r===null){\n                flag = false\n            } else if (t[0]+pos.c >= config.grid || t[0]+pos.c < 0 || t[1]+pos.r >= config.grid || t[1]+pos.r < 0){\n                flag = false\n            } else if (board[t[1]+pos.r][t[0]+pos.c].free===false){\n                flag = false;\n            }\n        })\n        return flag;\n    }\n\n    const moveStone = (x, y) => {\n        const stn = drawnStones[movingStone];\n        stn.forEach(t => t.attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\"));\n    }\n\n    const setPosition = (pos, val) => {\n        const stn = stones[movingStone].stone\n        stn.forEach(t => {\n            board[t[1]+pos.r][t[0]+pos.c].free = val;\n        });\n        board.map(a => console.info(a.map(b => b.free ? 1 : 0).join(\",\")))\n    }\n\n    function dragstarted(event) {\n        movingStone = +d3.select(this).attr(\"stn\");\n        if (movingStone !== currentStoneNr){\n            movingStone = null; \n        }\n    }\n    \n    function dragged(event) {\n        if (movingStone===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        moveStone(pos.x, pos.y)\n        drawnStones[movingStone].forEach(m => {\n            pos.x = Math.min(pos.x, m.attr(\"x\"))\n            pos.y = Math.min(pos.y, m.attr(\"y\"))\n        });\n        let check  = checkPosition(pos);\n        drawnStones[movingStone].forEach(m => {\n            m.attr(\"opacity\", check===false ? 0.5 : 1)\n        });\n    }\n    \n    function dragended(event) {\n        if (movingStone===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        let check  = checkPosition(pos);\n\n        if (check===true){\n            setPosition(pos, false)\n            currentStoneNr++;\n            drawStone();\n        } else {\n            pos = snapToGrid(width, height);\n            moveStone(pos.x, pos.y);\n            drawnStones[movingStone].forEach(m => {\n                m.attr(\"opacity\", 1)\n            });\n        }\n    }\n    \n    const drag = d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n\n    d3.select(div).selectAll('*').remove();\n\n    const svg = d3.select(div).append(\"svg\")\n        .attr(\"width\", width + p * 2)\n        .attr(\"height\", (height + p) * 2)\n        .append(\"g\")\n        .attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");\n\n    let row = svg.selectAll(\".row\")\n        .data(board)\n        .enter().append(\"g\")\n        .attr(\"class\", \"row\");\n\n    row.selectAll(\".square\")\n        .data((d) => d)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"square\")\n        .attr(\"x\", (d) => d.x )\n        .attr(\"y\", (d) => d.y )\n        .attr(\"width\", s )\n        .attr(\"height\", s )\n        .attr(\"rx\", s/10)\n        .attr(\"ry\", s/10)\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#444\");\n    \n    const drawStone = (x = (width - s) / 2, y = height + s * 2) => {\n        const stn = stones[currentStoneNr].stone;\n        const color = stones[currentStoneNr].type;\n        if (currentStoneNr === config.stones){\n            stones = generateStones(config.stones);\n            currentStoneNr = 0;\n            round++;\n            handleGameChange('round', round+1)\n        }\n        let pieces = []\n        stn.forEach((cell, i) => {\n            let piece = svg.append(\"rect\")\n                .attr(\"class\",\"stn\")\n                .attr(\"stn\", currentStoneNr)\n                .attr(\"x\", cell[0] * (s + p) )\n                .attr(\"y\", cell[1] * (s + p))\n                .attr(\"width\", s )\n                .attr(\"height\", s )\n                .attr(\"rx\", s/10)\n                .attr(\"ry\", s/10)\n                .style(\"fill\", col(color))\n                .style(\"stroke\", \"#000\")\n                .attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\")\n                .call(drag);\n                pieces.push(piece)\n        })\n        drawnStones.push(pieces);\n        handleGameChange('step', currentStoneNr+1)\n    }\n\n    drawStone();\n    \n}\n\nconst Board = ({config, game, handleChange}) => {\n    const classes = useStyles();\n    const widgetRef = useRef(null);\n\n    const handleGameChange = (key, value) => {\n        if (game.step > 1 || game.round > 1){ return; }\n        handleChange(key, value);\n    }\n\n    useLayoutEffect(() => {\n        draw(widgetRef.current, config, handleGameChange);\n    });\n\n    return <Box className={classes.board} ref={widgetRef}>\n        \n    </Box>\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}