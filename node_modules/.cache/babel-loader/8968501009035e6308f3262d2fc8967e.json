{"ast":null,"code":"var _jsxFileName = \"/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@material-ui/core';\nimport React, { useRef, useLayoutEffect } from 'react';\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst draw = div => {\n  const config = {\n    size: 40,\n    grid: 10,\n    padding: 2,\n    stones: 43,\n    colors: [\"#66c2a5\", \"#fc8d62\", \"#8da0cb\", \"#e78ac3\", \"#a6d854\", \"#ffd92f\", \"#e5c494\", \"#b3b3b3\"]\n  };\n  let s = config.size,\n      p = config.padding,\n      width = config.grid * (s + p),\n      height = width;\n  let col = d3.scaleOrdinal().range(config.colors);\n\n  const snapToGrid = (x, y) => {\n    let pos = {\n      c: Math.max(0, Math.floor(x / (s + p))),\n      r: Math.max(0, Math.floor(y / (s + p)))\n    };\n\n    if (pos.r >= config.grid) {\n      pos.y = height + s * 2;\n      pos.x = (width - s) / 2;\n      pos.c = pos.r = null;\n    } else {\n      pos.y = Math.min(config.grid - 1, pos.r) * (s + p);\n      pos.x = Math.min(config.grid - 1, pos.c) * (s + p);\n    }\n\n    return pos;\n  };\n\n  const checkPosition = pos => {\n    const stn = stones[movingStone].stone;\n    let flag = true;\n    stn.forEach(t => {\n      if (pos.c === null || pos.r === null) {\n        flag = false;\n      } else if (t[0] + pos.c >= config.grid || t[0] + pos.c < 0 || t[1] + pos.r >= config.grid || t[1] + pos.r < 0) {\n        flag = false;\n      } else if (board[t[1] + pos.r][t[0] + pos.c].free === false) {\n        flag = false;\n      }\n    });\n    return flag;\n  };\n\n  const moveStone = (x, y) => {\n    const stn = drawnStones[movingStone];\n    stn.forEach(t => t.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\"));\n  };\n\n  const setPosition = (pos, val) => {\n    const stn = stones[movingStone].stone;\n    stn.forEach(t => {\n      board[t[1] + pos.r][t[0] + pos.c].free = val;\n    });\n    board.map(a => console.info(a.map(b => b.free ? 1 : 0).join(\",\")));\n  };\n\n  function dragstarted(event) {\n    movingStone = +d3.select(this).attr(\"stn\");\n\n    if (movingStone !== currentStoneNr) {\n      movingStone = null;\n    }\n  }\n\n  function dragged(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    moveStone(pos.x, pos.y);\n    drawnStones[movingStone].forEach(m => {\n      pos.x = Math.min(pos.x, m.attr(\"x\"));\n      pos.y = Math.min(pos.y, m.attr(\"y\"));\n    });\n    let check = checkPosition(pos);\n    drawnStones[movingStone].forEach(m => {\n      m.attr(\"opacity\", check === false ? 0.5 : 1);\n    });\n  }\n\n  function dragended(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    let check = checkPosition(pos);\n\n    if (check === true) {\n      setPosition(pos, false);\n      currentStoneNr++;\n      drawStone();\n    } else {\n      pos = snapToGrid(width, height);\n      moveStone(pos.x, pos.y);\n      drawnStones[movingStone].forEach(m => {\n        m.attr(\"opacity\", 1);\n      });\n    }\n  }\n\n  const drag = d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  d3.select(div).selectAll('*').remove();\n  const svg = d3.select(div).append(\"svg\").attr(\"width\", width + p * 2).attr(\"height\", (height + p) * 2).append(\"g\").attr(\"transform\", \"translate(\" + p + \",\" + p + \")\");\n  const board = d3.range(config.grid).map(r => d3.range(config.grid).map(c => ({\n    x: c * (s + p),\n    y: r * (s + p),\n    free: true\n  })));\n  let row = svg.selectAll(\".row\").data(board).enter().append(\"g\").attr(\"class\", \"row\");\n  row.selectAll(\".square\").data(d => d).enter().append(\"rect\").attr(\"class\", \"square\").attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", \"#fff\").style(\"stroke\", \"#444\");\n  let stones = generateStones(config.stones);\n  let drawnStones = [];\n  let currentStoneNr = 0,\n      movingStone = 0;\n\n  const drawStone = (x = (width - s) / 2, y = height + s * 2) => {\n    const stn = stones[currentStoneNr].stone;\n    const color = stones[currentStoneNr].type;\n    let pieces = [];\n    stn.forEach((cell, i) => {\n      let piece = svg.append(\"rect\").attr(\"class\", \"stn\").attr(\"stn\", currentStoneNr).attr(\"x\", cell[0] * (s + p)).attr(\"y\", cell[1] * (s + p)).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", col(color)).style(\"stroke\", \"#000\").attr(\"transform\", \"translate(\" + x + \",\" + y + \")\").call(drag);\n      pieces.push(piece);\n    });\n    drawnStones.push(pieces);\n  };\n\n  drawStone();\n};\n\nconst Board = () => {\n  _s();\n\n  const classes = useStyles();\n  const widgetRef = useRef(null);\n  useLayoutEffect(() => {\n    draw(widgetRef.current);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.board,\n    ref: widgetRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Board, \"cFDRHWlqjeUjP2b8ZEl5Vn6bhi8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js"],"names":["Box","React","useRef","useLayoutEffect","useStyles","d3","generateStones","draw","div","config","size","grid","padding","stones","colors","s","p","width","height","col","scaleOrdinal","range","snapToGrid","x","y","pos","c","Math","max","floor","r","min","checkPosition","stn","movingStone","stone","flag","forEach","t","board","free","moveStone","drawnStones","attr","setPosition","val","map","a","console","info","b","join","dragstarted","event","select","currentStoneNr","dragged","m","check","dragended","drawStone","drag","on","selectAll","remove","svg","append","row","data","enter","d","style","color","type","pieces","cell","i","piece","call","push","Board","classes","widgetRef","current"],"mappings":"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","sourcesContent":["import { Box } from '@material-ui/core'\nimport React, {useRef, useLayoutEffect} from 'react'\n\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones'\n\nconst draw = (div) => {\n    const config = {\n        size: 40,\n        grid: 10,\n        padding: 2,\n        stones: 43,\n        colors: [\"#66c2a5\",\"#fc8d62\",\"#8da0cb\",\"#e78ac3\",\"#a6d854\",\"#ffd92f\",\"#e5c494\",\"#b3b3b3\"]\n    }\n\n    let s = config.size, p=config.padding, width = config.grid * (s + p), height = width;\n    let col = d3.scaleOrdinal().range(config.colors)\n\n    const snapToGrid = (x, y) => {\n        let pos = {\n            c: Math.max(0, Math.floor(x / (s + p))),\n            r: Math.max(0, Math.floor(y / (s + p)))\n        }\n        if (pos.r >= config.grid) {\n            pos.y = height + s * 2\n            pos.x = (width - s) / 2\n            pos.c = pos.r = null;\n        } else {\n            pos.y = Math.min(config.grid-1, pos.r) * (s + p)\n            pos.x = Math.min(config.grid-1, pos.c) * (s + p)\n        }\n        return pos\n    }\n\n    const checkPosition = (pos) => {\n        const stn = stones[movingStone].stone\n        let flag = true;\n        stn.forEach(t => {\n            if (pos.c===null || pos.r===null){\n                flag = false\n            } else if (t[0]+pos.c >= config.grid || t[0]+pos.c < 0 || t[1]+pos.r >= config.grid || t[1]+pos.r < 0){\n                flag = false\n            } else if (board[t[1]+pos.r][t[0]+pos.c].free===false){\n                flag = false;\n            }\n        })\n        return flag;\n    }\n\n    const moveStone = (x, y) => {\n        const stn = drawnStones[movingStone];\n        stn.forEach(t => t.attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\"));\n    }\n\n    const setPosition = (pos, val) => {\n        const stn = stones[movingStone].stone\n        stn.forEach(t => {\n            board[t[1]+pos.r][t[0]+pos.c].free = val;\n        });\n        board.map(a => console.info(a.map(b => b.free ? 1 : 0).join(\",\")))\n    }\n\n    function dragstarted(event) {\n        movingStone = +d3.select(this).attr(\"stn\");\n        if (movingStone !== currentStoneNr){\n            movingStone = null; \n        }\n    }\n    \n    function dragged(event) {\n        if (movingStone===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        moveStone(pos.x, pos.y)\n        drawnStones[movingStone].forEach(m => {\n            pos.x = Math.min(pos.x, m.attr(\"x\"))\n            pos.y = Math.min(pos.y, m.attr(\"y\"))\n        });\n        let check  = checkPosition(pos);\n        drawnStones[movingStone].forEach(m => {\n            m.attr(\"opacity\", check===false ? 0.5 : 1)\n        });\n    }\n    \n    function dragended(event) {\n        if (movingStone===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        let check  = checkPosition(pos);\n\n        if (check===true){\n            setPosition(pos, false)\n            currentStoneNr++;\n            drawStone();\n        } else {\n            pos = snapToGrid(width, height);\n            moveStone(pos.x, pos.y);\n            drawnStones[movingStone].forEach(m => {\n                m.attr(\"opacity\", 1)\n            });\n        }\n    }\n    \n    const drag = d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n\n    d3.select(div).selectAll('*').remove();\n\n    const svg = d3.select(div).append(\"svg\")\n        .attr(\"width\", width + p * 2)\n        .attr(\"height\", (height + p) * 2)\n        .append(\"g\")\n        .attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");\n    \n    const board = d3.range(config.grid).map((r) => \n        d3.range(config.grid).map((c) => \n            ({\n                x: c * (s + p), \n                y: r * (s + p), \n                free: true \n            })));\n\n    let row = svg.selectAll(\".row\")\n        .data(board)\n        .enter().append(\"g\")\n        .attr(\"class\", \"row\");\n\n    row.selectAll(\".square\")\n        .data((d) => d)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"square\")\n        .attr(\"x\", (d) => d.x )\n        .attr(\"y\", (d) => d.y )\n        .attr(\"width\", s )\n        .attr(\"height\", s )\n        .attr(\"rx\", s/10)\n        .attr(\"ry\", s/10)\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#444\");\n    \n    let stones = generateStones(config.stones)\n    let drawnStones = [];\n    let currentStoneNr = 0, movingStone = 0;\n\n    const drawStone = (x = (width - s) / 2, y = height + s * 2) => {\n        const stn = stones[currentStoneNr].stone;\n        const color = stones[currentStoneNr].type \n        let pieces = []\n        stn.forEach((cell, i) => {\n            let piece = svg.append(\"rect\")\n                .attr(\"class\",\"stn\")\n                .attr(\"stn\", currentStoneNr)\n                .attr(\"x\", cell[0] * (s + p) )\n                .attr(\"y\", cell[1] * (s + p))\n                .attr(\"width\", s )\n                .attr(\"height\", s )\n                .attr(\"rx\", s/10)\n                .attr(\"ry\", s/10)\n                .style(\"fill\", col(color))\n                .style(\"stroke\", \"#000\")\n                .attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\")\n                .call(drag);\n                pieces.push(piece)\n        })\n        drawnStones.push(pieces)\n    }\n\n    drawStone();\n    \n}\n\nconst Board = () => {\n    const classes = useStyles();\n    const widgetRef = useRef(null);\n\n    useLayoutEffect(() => {\n        \n        draw(widgetRef.current);\n        \n    });\n\n    return <Box className={classes.board} ref={widgetRef}>\n        \n    </Box>\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}