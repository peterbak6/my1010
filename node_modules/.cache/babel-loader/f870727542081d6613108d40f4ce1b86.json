{"ast":null,"code":"import * as d3 from 'd3';\nexport const Stones = [{\n  stone: [[0, 0]],\n  weight: 4,\n  type: 0\n}, {\n  stone: [[0, 0], [0, 1]],\n  weight: 3,\n  type: 1\n}, {\n  stone: [[0, 0], [1, 0]],\n  weight: 3,\n  type: 1\n}, {\n  stone: [[0, 0], [0, 1], [0, 2]],\n  weight: 2,\n  type: 2\n}, {\n  stone: [[0, 0], [1, 0], [2, 0]],\n  weight: 2,\n  type: 2\n}, {\n  stone: [[0, 0], [1, 0], [1, 1]],\n  weight: 2,\n  type: 0\n}, {\n  stone: [[0, 0], [1, 0], [0, 1]],\n  weight: 2,\n  type: 3\n}, {\n  stone: [[0, 0], [0, 1], [1, 1]],\n  weight: 2,\n  type: 3\n}, {\n  stone: [[1, 0], [1, 1], [0, 1]],\n  weight: 2,\n  type: 3\n}, {\n  stone: [[0, 0], [0, 1], [0, 2], [0, 3]],\n  weight: 1,\n  type: 4\n}, {\n  stone: [[0, 0], [1, 0], [2, 0], [3, 0]],\n  weight: 1,\n  type: 4\n}, {\n  stone: [[0, 0], [0, 1], [1, 0], [1, 1]],\n  weight: 1,\n  type: 4\n}, {\n  stone: [[0, 0], [0, 1], [0, 2], [1, 2]],\n  weight: 1,\n  type: 5\n}, {\n  stone: [[1, 0], [1, 1], [1, 2], [0, 2]],\n  weight: 1,\n  type: 5\n}, {\n  stone: [[0, 0], [1, 0], [0, 1], [2, 0]],\n  weight: 1,\n  type: 5\n}, {\n  stone: [[0, 0], [1, 0], [2, 0], [2, 1]],\n  weight: 1,\n  type: 5\n}, {\n  stone: [[1, 0], [1, 1], [1, 2], [0, 1]],\n  weight: 1,\n  type: 6\n}, {\n  stone: [[0, 0], [0, 1], [0, 2], [1, 1]],\n  weight: 1,\n  type: 6\n}, {\n  stone: [[1, 0], [0, 1], [1, 1], [2, 1]],\n  weight: 1,\n  type: 6\n}, {\n  stone: [[0, 0], [1, 0], [2, 0], [1, 1]],\n  weight: 1,\n  type: 6\n}, {\n  stone: [[0, 1], [1, 0], [1, 1], [2, 0]],\n  weight: 1,\n  type: 7\n}, {\n  stone: [[0, 0], [1, 0], [1, 1], [2, 1]],\n  weight: 1,\n  type: 7\n}, {\n  stone: [[0, 0], [1, 0], [2, 0], [0, 1], [1, 1], [2, 1], [0, 2], [1, 2], [2, 2]],\n  weight: 1,\n  type: 0\n}];\n\nconst weightedSample = (arr, wgh) => {\n  let w = wgh.reduce((a, e) => a + e);\n  let r = Math.random() * w;\n  return arr.find((e, i) => (r -= wgh[i]) < 0);\n};\n\nexport const generateStones = (N = 3) => {\n  let stn = d3.range(N).map(() => {\n    return weightedSample(d3.range(Stones.length), Stones.map(a => a.weight));\n  });\n  return stn.map(s => Stones[s]);\n};","map":{"version":3,"sources":["/Users/peterbak/Documents/game1010/src/widgets/Stones.js"],"names":["d3","Stones","stone","weight","type","weightedSample","arr","wgh","w","reduce","a","e","r","Math","random","find","i","generateStones","N","stn","range","map","length","s"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nexport const Stones = [\n    {stone:[[0,0]], weight: 4, type:0},\n\n    {stone:[[0,0],[0,1]], weight: 3, type:1}, \n    {stone:[[0,0],[1,0]], weight: 3, type:1},\n\n    {stone:[[0,0],[0,1],[0,2]], weight: 2, type:2},\n    {stone:[[0,0],[1,0],[2,0]], weight: 2, type:2},\n    {stone:[[0,0],[1,0],[1,1]], weight: 2, type:0},\n    {stone:[[0,0],[1,0],[0,1]], weight: 2, type:3},\n    {stone:[[0,0],[0,1],[1,1]], weight: 2, type:3},\n    {stone:[[1,0],[1,1],[0,1]], weight: 2, type:3},\n\n    {stone:[[0,0],[0,1],[0,2],[0,3]], weight: 1, type:4},\n    {stone:[[0,0],[1,0],[2,0],[3,0]], weight: 1, type:4},\n    {stone:[[0,0],[0,1],[1,0],[1,1]], weight: 1, type:4},\n    {stone:[[0,0],[0,1],[0,2],[1,2]], weight: 1, type:5},\n    {stone:[[1,0],[1,1],[1,2],[0,2]], weight: 1, type:5},\n    {stone:[[0,0],[1,0],[0,1],[2,0]], weight: 1, type:5},\n    {stone:[[0,0],[1,0],[2,0],[2,1]], weight: 1, type:5},\n    \n    {stone:[[1,0],[1,1],[1,2],[0,1]], weight: 1, type:6},\n    {stone:[[0,0],[0,1],[0,2],[1,1]], weight: 1, type:6},\n    {stone:[[1,0],[0,1],[1,1],[2,1]], weight: 1, type:6},\n    {stone:[[0,0],[1,0],[2,0],[1,1]], weight: 1, type:6},\n\n    {stone:[[0,1],[1,0],[1,1],[2,0]], weight: 1, type:7},\n    {stone:[[0,0],[1,0],[1,1],[2,1]], weight: 1, type:7},\n\n    {stone:[[0,0],[1,0],[2,0],[0,1],[1,1],[2,1],[0,2],[1,2],[2,2]], weight: 1, type:0}\n]\n\nconst weightedSample = (arr, wgh) => {\n    let w = wgh.reduce((a, e) => a + e);\n    let r = Math.random() * w;\n    return arr.find((e, i) => (r -= wgh[i]) < 0);\n}\n\nexport const generateStones = (N = 3) => {\n    let stn = d3.range(N).map(() => {\n        return weightedSample(d3.range(Stones.length), Stones.map(a=>a.weight))\n    })\n    return stn.map(s => Stones[s])\n}"]},"metadata":{},"sourceType":"module"}