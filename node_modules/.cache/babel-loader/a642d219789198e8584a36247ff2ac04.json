{"ast":null,"code":"var _jsxFileName = \"/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@material-ui/core';\nimport React, { useRef, useLayoutEffect } from 'react';\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst draw = (div, config, handleGameChange) => {\n  let s = config.size,\n      p = config.padding,\n      width = config.grid * (s + p),\n      height = width;\n  let col = d3.scaleOrdinal().range(config.colors);\n  const board = d3.range(config.grid).map(r => d3.range(config.grid).map(c => ({\n    x: c * (s + p),\n    y: r * (s + p),\n    free: true\n  })));\n  let stones = generateStones(config.stones),\n      drawnStones = [],\n      stoneCodes = {},\n      currentStoneNrs = [],\n      stonesLayed = 0,\n      movingStone = 0;\n\n  const checkRowColFull = () => {\n    let fullRow = [],\n        fullColumn = [];\n\n    for (let r = 0; r < config.grid; r++) {\n      let cRow = board[r].every(c => !c.free);\n      let cCol = board.map(b => b[r]).every(c => !c.free);\n\n      if (cRow) {\n        fullRow.push(r);\n      }\n\n      if (cCol) {\n        fullColumn.push(r);\n      }\n    }\n\n    let points = 0;\n    fullRow.forEach(row => {\n      board[row].forEach(cell => {\n        cell.stone.remove();\n        cell['stone'] = null;\n        points++;\n        cell.free = true;\n      });\n    });\n    fullColumn.forEach(col => {\n      board.forEach(row => {\n        let cell = row[col];\n        cell.stone.remove();\n        cell['stone'] = null;\n        points++;\n        cell.free = true;\n      });\n    });\n    return points;\n  };\n\n  const snapToGrid = (x, y) => {\n    let pos = {\n      c: Math.max(0, Math.floor(x / (s + p))),\n      r: Math.max(0, Math.floor(y / (s + p)))\n    };\n\n    if (pos.r >= config.grid) {\n      //TODO: position to the origianl position !  !  !\n      pos.y = height + s * 2;\n      pos.x = (width - s) / 2;\n      pos.c = pos.r = null;\n    } else {\n      pos.y = Math.min(config.grid - 1, pos.r) * (s + p);\n      pos.x = Math.min(config.grid - 1, pos.c) * (s + p);\n    }\n\n    return pos;\n  };\n\n  const checkPositionFree = (pos, codes) => {\n    let flag = true;\n    codes.forEach(t => {\n      if (pos.c === null || pos.r === null) {\n        flag = false;\n      } else if (t[0] + pos.c >= config.grid || t[0] + pos.c < 0 || t[1] + pos.r >= config.grid || t[1] + pos.r < 0) {\n        flag = false;\n      } else if (board[t[1] + pos.r][t[0] + pos.c].free === false) {\n        flag = false;\n      }\n    });\n    return flag;\n  };\n\n  const setPosition = (pos, val, codes, stn) => {\n    codes.forEach((t, i) => {\n      board[t[1] + pos.r][t[0] + pos.c].free = val;\n      board[t[1] + pos.r][t[0] + pos.c].stone = stn[i];\n    });\n  };\n\n  const moveStone = (x, y, stn) => {\n    stn.forEach(t => t.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\"));\n  };\n\n  let drawnPiecePos = 0;\n\n  const drawStonePieces = (stn, color, index) => {\n    let pieces = [];\n    let stoneWidth = d3.max(stn.map(s => s[0]));\n    let stonePosY = height + s * 2;\n    let stonePosX = drawnPiecePos * (s + p);\n\n    if (stonePosX > width - stoneWidth * (s + p)) {\n      stonePosY = height + s * 4;\n      stonePosX = width / 2;\n    }\n\n    stn.forEach(cell => {\n      let piece = svg.append(\"rect\").attr(\"class\", \"stn\").attr(\"stn\", index).attr(\"row\", cell[1]).attr(\"col\", cell[0]).attr(\"x\", cell[0] * (s + p)).attr(\"y\", cell[1] * (s + p)).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / config.size).attr(\"ry\", s / config.size).style(\"fill\", col(color)).style(\"fill-opacity\", 0.75).style(\"stroke\", \"#000\").attr(\"transform\", \"translate(\" + (stonePosX + 2) + \",\" + stonePosY + \")\").call(drag);\n      pieces.push(piece);\n    });\n    drawnPiecePos += stoneWidth + 2;\n    return pieces;\n  };\n\n  const drawStone = () => {\n    if (currentStoneNrs.length > 0) {\n      return;\n    }\n\n    stones = generateStones(config.stones);\n    drawnPiecePos = 0;\n\n    for (let i = 0, I = stones.length; i < I; i++) {\n      const stn = stones.shift();\n      stoneCodes[stonesLayed] = stn.stone;\n      let pieces = drawStonePieces(stn.stone, stn.type, stonesLayed);\n      drawnStones.push(pieces);\n      currentStoneNrs.push(stonesLayed);\n      stonesLayed++;\n    }\n  };\n\n  function dragstarted(event) {\n    movingStone = +d3.select(this).attr(\"stn\");\n\n    if (currentStoneNrs.indexOf(movingStone) < 0) {\n      movingStone = null;\n    }\n  }\n\n  function dragged(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let stn = drawnStones[movingStone];\n    let stnCode = stoneCodes[movingStone];\n    let pos = snapToGrid(event.x, event.y);\n    moveStone(pos.x, pos.y, stn);\n    let check = checkPositionFree(pos, stnCode);\n    stn.forEach(m => {\n      m.style(\"fill-opacity\", check === false ? 0.25 : 0.75);\n    });\n  }\n\n  function dragended(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let stn = drawnStones[movingStone];\n    let stnCode = stoneCodes[movingStone];\n    let pos = snapToGrid(event.x, event.y);\n    let check = checkPositionFree(pos, stnCode);\n\n    if (check === true) {\n      setPosition(pos, false, stnCode, stn);\n      currentStoneNrs.splice(currentStoneNrs.indexOf(movingStone), 1);\n      let points = checkRowColFull();\n      handleGameChange('points', points);\n      drawStone();\n    } else {\n      pos = snapToGrid(width, height);\n      moveStone(pos.x, pos.y, stn);\n      stn.forEach(m => {\n        m.style(\"fill-opacity\", 0.75);\n      });\n    }\n  }\n\n  const drag = d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  d3.select(div).selectAll('*').remove();\n  const svg = d3.select(div).append(\"svg\").attr(\"width\", width + p * 2).attr(\"height\", (height + p) * 2).append(\"g\").attr(\"transform\", \"translate(\" + p + \",\" + p + \")\");\n  let row = svg.selectAll(\".row\").data(board).enter().append(\"g\").attr(\"class\", \"row\");\n  row.selectAll(\".square\").data(d => d).enter().append(\"rect\").attr(\"class\", \"board\").attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / config.size).attr(\"ry\", s / config.size).style(\"fill\", \"#fff\").style(\"stroke\", \"#a2a2a2\");\n  drawStone();\n};\n\nconst Board = ({\n  config,\n  points,\n  handleChange\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const widgetRef = useRef(null);\n\n  const handleGameChange = (key, value) => {\n    handleChange(key, value);\n  };\n\n  useLayoutEffect(() => {\n    if (points > 0) {\n      return;\n    }\n\n    draw(widgetRef.current, config, handleGameChange);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.board,\n    ref: widgetRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Board, \"cFDRHWlqjeUjP2b8ZEl5Vn6bhi8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js"],"names":["Box","React","useRef","useLayoutEffect","useStyles","d3","generateStones","draw","div","config","handleGameChange","s","size","p","padding","width","grid","height","col","scaleOrdinal","range","colors","board","map","r","c","x","y","free","stones","drawnStones","stoneCodes","currentStoneNrs","stonesLayed","movingStone","checkRowColFull","fullRow","fullColumn","cRow","every","cCol","b","push","points","forEach","row","cell","stone","remove","snapToGrid","pos","Math","max","floor","min","checkPositionFree","codes","flag","t","setPosition","val","stn","i","moveStone","attr","drawnPiecePos","drawStonePieces","color","index","pieces","stoneWidth","stonePosY","stonePosX","piece","svg","append","style","call","drag","drawStone","length","I","shift","type","dragstarted","event","select","indexOf","dragged","stnCode","check","m","dragended","splice","on","selectAll","data","enter","d","Board","handleChange","classes","widgetRef","key","value","current"],"mappings":"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","sourcesContent":["import { Box } from '@material-ui/core'\nimport React, {useRef, useLayoutEffect} from 'react'\n\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones'\n\nconst draw = (div, config, handleGameChange) => {\n    \n    let s = config.size, p=config.padding, width = config.grid * (s + p), height = width;\n    let col = d3.scaleOrdinal().range(config.colors);\n\n    const board = d3.range(config.grid).map((r) => \n        d3.range(config.grid).map((c) => \n            ({\n                x: c * (s + p), \n                y: r * (s + p), \n                free: true \n            })));\n\n    let stones = generateStones(config.stones), \n        drawnStones = [], \n        stoneCodes = {},\n        currentStoneNrs = [], \n        stonesLayed = 0, \n        movingStone = 0;\n\n    const checkRowColFull = () => {\n        let fullRow = [], fullColumn = [];\n        for (let r = 0; r < config.grid; r++){\n            let cRow = board[r].every(c=>!c.free);\n            let cCol = board.map(b => b[r]).every(c=>!c.free);\n            if (cRow) {\n                fullRow.push(r);\n            }\n            if (cCol) {\n                fullColumn.push(r);\n            }\n        }\n        let points = 0\n        fullRow.forEach(row => {\n            board[row].forEach(cell => {\n                cell.stone.remove();\n                cell['stone'] = null;\n                points++;\n                cell.free = true;\n            })\n        })\n        fullColumn.forEach(col => {\n            board.forEach(row => {\n                let cell = row[col]\n                cell.stone.remove();\n                cell['stone'] = null;\n                points++;\n                cell.free = true;\n            })\n        })\n        return points;\n    }\n        \n    const snapToGrid = (x, y) => {\n        let pos = {\n            c: Math.max(0, Math.floor(x / (s + p))),\n            r: Math.max(0, Math.floor(y / (s + p)))\n        }\n        if (pos.r >= config.grid) {\n            //TODO: position to the origianl position !  !  !\n            pos.y = height + s * 2\n            pos.x = (width - s) / 2\n            pos.c = pos.r = null;\n        } else {\n            pos.y = Math.min(config.grid-1, pos.r) * (s + p)\n            pos.x = Math.min(config.grid-1, pos.c) * (s + p)\n        }\n        return pos\n    }\n\n    const checkPositionFree = (pos, codes) => {\n        let flag = true;\n        codes.forEach(t => {\n            if (pos.c===null || pos.r===null){\n                flag = false\n            } else if (t[0]+pos.c >= config.grid || t[0]+pos.c < 0 || t[1]+pos.r >= config.grid || t[1]+pos.r < 0){\n                flag = false\n            } else if (board[t[1]+pos.r][t[0]+pos.c].free===false){\n                flag = false;\n            }\n        })\n        return flag;\n    }\n\n    const setPosition = (pos, val, codes, stn) => {\n        codes.forEach((t,i) => {\n            board[t[1]+pos.r][t[0]+pos.c].free = val;\n            board[t[1]+pos.r][t[0]+pos.c].stone = stn[i];\n        });\n    }\n\n    const moveStone = (x, y, stn) => {\n        stn.forEach(t => t.attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\"));\n    }\n\n    let drawnPiecePos = 0;\n    const drawStonePieces  = (stn, color, index) => {\n        let pieces = []\n        let stoneWidth = d3.max(stn.map(s => s[0]));\n        let stonePosY = height + s * 2\n        let stonePosX = drawnPiecePos * (s + p);\n        if (stonePosX > width - stoneWidth * (s+p)){\n            stonePosY = height + s * 4\n            stonePosX = width / 2\n        }\n        stn.forEach((cell) => {\n            let piece = svg.append(\"rect\")\n                .attr(\"class\",\"stn\")\n                .attr(\"stn\", index)\n                .attr(\"row\", cell[1])\n                .attr(\"col\", cell[0])\n                .attr(\"x\", cell[0] * (s + p) )\n                .attr(\"y\", cell[1] * (s + p))\n                .attr(\"width\", s )\n                .attr(\"height\", s )\n                .attr(\"rx\", s/config.size)\n                .attr(\"ry\", s/config.size)\n                .style(\"fill\", col(color))\n                .style(\"fill-opacity\", 0.75)\n                .style(\"stroke\", \"#000\")\n                .attr(\"transform\",\"translate(\"+(stonePosX + 2)+\",\"+(stonePosY)+\")\")\n                .call(drag);\n            pieces.push(piece)\n        })\n        drawnPiecePos += stoneWidth + 2;\n        return pieces;\n    }\n \n    const drawStone = () => {\n        if (currentStoneNrs.length>0){ return }\n\n        stones = generateStones(config.stones);\n        drawnPiecePos = 0;\n        for (let i = 0, I = stones.length; i < I; i++){\n            const stn = stones.shift();\n            stoneCodes[stonesLayed] = stn.stone;\n            let pieces = drawStonePieces(stn.stone, stn.type, stonesLayed);\n            drawnStones.push(pieces);\n            currentStoneNrs.push(stonesLayed);\n            stonesLayed++;\n        }\n    }\n\n    function dragstarted(event) {\n        movingStone = +d3.select(this).attr(\"stn\");\n        if (currentStoneNrs.indexOf(movingStone) < 0){ \n            movingStone = null; \n        }\n    }\n    \n    function dragged(event) {\n        if (movingStone===null){return;}\n        let stn = drawnStones[movingStone]\n        let stnCode = stoneCodes[movingStone]\n        let pos = snapToGrid(event.x, event.y);\n        moveStone(pos.x, pos.y, stn)\n        let check  = checkPositionFree(pos, stnCode);\n        stn.forEach(m => {\n            m.style(\"fill-opacity\", check===false ? 0.25 : 0.75)\n        });\n    }\n    \n    function dragended(event) {\n        if (movingStone===null){return;}\n        let stn = drawnStones[movingStone]\n        let stnCode = stoneCodes[movingStone]\n        let pos = snapToGrid(event.x, event.y);\n        let check  = checkPositionFree(pos, stnCode);\n\n        if (check===true){\n            setPosition(pos, false, stnCode, stn)\n            currentStoneNrs.splice(currentStoneNrs.indexOf(movingStone), 1);\n            let points = checkRowColFull();\n            handleGameChange('points', points);\n            drawStone();\n        } else {\n            pos = snapToGrid(width, height);\n            moveStone(pos.x, pos.y, stn);\n            stn.forEach(m => {\n                m.style(\"fill-opacity\", 0.75)\n            });\n        }\n    }\n    \n    const drag = d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n\n    d3.select(div).selectAll('*').remove();\n\n    const svg = d3.select(div).append(\"svg\")\n        .attr(\"width\", width + p * 2)\n        .attr(\"height\", (height + p) * 2)\n        .append(\"g\")\n        .attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");\n\n    let row = svg.selectAll(\".row\")\n        .data(board)\n        .enter().append(\"g\")\n        .attr(\"class\", \"row\");\n\n    row.selectAll(\".square\")\n        .data((d) => d)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"board\")\n        .attr(\"x\", (d) => d.x )\n        .attr(\"y\", (d) => d.y )\n        .attr(\"width\", s )\n        .attr(\"height\", s )\n        .attr(\"rx\", s/config.size)\n        .attr(\"ry\", s/config.size)\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#a2a2a2\");\n\n    drawStone();\n    \n}\n\nconst Board = ({config, points, handleChange}) => {\n    const classes = useStyles();\n    const widgetRef = useRef(null);\n\n    const handleGameChange = (key, value) => {\n        handleChange(key, value);\n    }\n\n    useLayoutEffect(() => {\n        if (points > 0){ return; }\n        draw(widgetRef.current, config, handleGameChange);\n    });\n\n    return <Box className={classes.board} ref={widgetRef}></Box>\n\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}