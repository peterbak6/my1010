{"ast":null,"code":"var _jsxFileName = \"/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@material-ui/core';\nimport React, { useRef, useLayoutEffect } from 'react';\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { Stones } from './Stones';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generateStones = (N = 20, E = Stones.length) => {\n  let stn = d3.range(N).map(n => {\n    return Math.floor(Math.random() * E);\n  });\n  return stn;\n};\n\nconst draw = div => {\n  const config = {\n    size: 40,\n    grid: 10,\n    padding: 2,\n    stones: 43,\n    colors: [\"#66c2a5\", \"#fc8d62\", \"#8da0cb\", \"#e78ac3\", \"#a6d854\", \"#ffd92f\", \"#e5c494\", \"#b3b3b3\"]\n  };\n  let s = config.size,\n      p = config.padding,\n      width = config.grid * (s + p),\n      height = width;\n  let col = d3.scaleOrdinal().range(config.colors);\n\n  const snapToGrid = (x, y) => {\n    let pos = {\n      c: Math.max(0, Math.floor(x / (s + p))),\n      r: Math.max(0, Math.floor(y / (s + p)))\n    };\n\n    if (pos.r >= config.grid) {\n      pos.y = height + s * 2;\n      pos.x = (width - s) / 2;\n      pos.c = pos.r = null;\n    } else {\n      pos.y = Math.min(config.grid - 1, pos.r) * (s + p);\n      pos.x = Math.min(config.grid - 1, pos.c) * (s + p);\n    }\n\n    return pos;\n  };\n\n  const checkPosition = pos => {\n    const stn = stones[movingStone];\n    let flag = true;\n    stn.forEach(t => {\n      if (pos.c === null || pos.r === null) {\n        flag = false;\n      } else if (t[0] + pos.c >= config.grid || t[0] + pos.c < 0 || t[1] + pos.r >= config.grid || t[1] + pos.r < 0) {\n        flag = false;\n      } else if (board[t[1] + pos.r][t[0] + pos.c].free === false) {\n        flag = false;\n      }\n    });\n    return flag;\n  };\n\n  const setPosition = (pos, val) => {\n    const stn = stones[movingStone];\n    stn.forEach(t => {\n      board[t[1] + pos.r][t[0] + pos.c].free = val;\n    });\n    board.map(a => console.info(a.map(b => b.free ? 1 : 0).join(\",\")));\n  };\n\n  function dragstarted(event) {\n    movingStone = +d3.select(this).attr(\"stn\");\n\n    if (movingStone !== currentStoneNr) {\n      movingStone = null;\n    }\n  }\n\n  function dragged(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    moveStone(pos.x, pos.y);\n    drawnStones[movingStone].forEach(m => {\n      pos.x = Math.min(pos.x, m.attr(\"x\"));\n      pos.y = Math.min(pos.y, m.attr(\"y\"));\n    });\n    let check = checkPosition(pos);\n    drawnStones[movingStone].forEach(m => {\n      m.attr(\"opacity\", check === false ? 0.5 : 1);\n    });\n  }\n\n  function dragended(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    let check = checkPosition(pos);\n\n    if (check === true) {\n      setPosition(pos, false);\n      currentStoneNr++;\n      drawStone();\n    } else {\n      pos = snapToGrid(width, height);\n      moveStone(pos.x, pos.y);\n      drawnStones[movingStone].forEach(m => {\n        m.attr(\"opacity\", 1);\n      });\n    }\n  }\n\n  const drag = d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  d3.select(div).selectAll('*').remove();\n  const svg = d3.select(div).append(\"svg\").attr(\"width\", width + p * 2).attr(\"height\", (height + p) * 2).append(\"g\").attr(\"transform\", \"translate(\" + p + \",\" + p + \")\");\n  const board = d3.range(config.grid).map(r => d3.range(config.grid).map(c => ({\n    x: c * (s + p),\n    y: r * (s + p),\n    free: true\n  })));\n  let row = svg.selectAll(\".row\").data(board).enter().append(\"g\").attr(\"class\", \"row\");\n  row.selectAll(\".square\").data(d => d).enter().append(\"rect\").attr(\"class\", \"square\").attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", \"#fff\").style(\"stroke\", \"#444\");\n  let stones = generateStones(config.stones, Stones.length).map(t => Stones[t].stone);\n  let drawnStones = [];\n  let currentStoneNr = 0,\n      movingStone = 0;\n\n  const drawStone = (x = (width - s) / 2, y = height + s * 2) => {\n    const stn = stones[currentStoneNr];\n    let pieces = [];\n    stn.forEach((cell, i) => {\n      let piece = svg.append(\"rect\").attr(\"class\", \"stn\").attr(\"stn\", currentStoneNr).attr(\"x\", cell[0] * (s + p)).attr(\"y\", cell[1] * (s + p)).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", col(stn.length)).style(\"stroke\", \"#000\").attr(\"transform\", \"translate(\" + x + \",\" + y + \")\").call(drag);\n      pieces.push(piece);\n    });\n    drawnStones.push(pieces);\n  };\n\n  const moveStone = (x, y) => {\n    const stn = drawnStones[movingStone];\n    stn.forEach(t => t.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\"));\n  };\n\n  drawStone();\n};\n\nconst Board = () => {\n  _s();\n\n  const classes = useStyles();\n  const widgetRef = useRef(null);\n  useLayoutEffect(() => {\n    draw(widgetRef.current);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.board,\n    ref: widgetRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Board, \"cFDRHWlqjeUjP2b8ZEl5Vn6bhi8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js"],"names":["Box","React","useRef","useLayoutEffect","useStyles","d3","Stones","generateStones","N","E","length","stn","range","map","n","Math","floor","random","draw","div","config","size","grid","padding","stones","colors","s","p","width","height","col","scaleOrdinal","snapToGrid","x","y","pos","c","max","r","min","checkPosition","movingStone","flag","forEach","t","board","free","setPosition","val","a","console","info","b","join","dragstarted","event","select","attr","currentStoneNr","dragged","moveStone","drawnStones","m","check","dragended","drawStone","drag","on","selectAll","remove","svg","append","row","data","enter","d","style","stone","pieces","cell","i","piece","call","push","Board","classes","widgetRef","current"],"mappings":"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","sourcesContent":["import { Box } from '@material-ui/core'\nimport React, {useRef, useLayoutEffect} from 'react'\n\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { Stones } from './Stones'\n\nconst generateStones = (N=20, E=Stones.length) => {\n    let stn = d3.range(N).map(n => {\n        return Math.floor(Math.random() * E)\n    })\n    return stn\n}\n\nconst draw = (div) => {\n    const config = {\n        size: 40,\n        grid: 10,\n        padding: 2,\n        stones: 43,\n        colors: [\"#66c2a5\",\"#fc8d62\",\"#8da0cb\",\"#e78ac3\",\"#a6d854\",\"#ffd92f\",\"#e5c494\",\"#b3b3b3\"]\n    }\n\n    let s = config.size, p=config.padding, width = config.grid * (s + p), height = width;\n    let col = d3.scaleOrdinal().range(config.colors)\n\n    const snapToGrid = (x, y) => {\n        let pos = {\n            c: Math.max(0, Math.floor(x / (s + p))),\n            r: Math.max(0, Math.floor(y / (s + p)))\n        }\n        if (pos.r >= config.grid) {\n            pos.y = height + s * 2\n            pos.x = (width - s) / 2\n            pos.c = pos.r = null;\n        } else {\n            pos.y = Math.min(config.grid-1, pos.r) * (s + p)\n            pos.x = Math.min(config.grid-1, pos.c) * (s + p)\n        }\n        return pos\n    }\n\n    const checkPosition = (pos) => {\n        const stn = stones[movingStone]\n        let flag = true;\n        stn.forEach(t => {\n            if (pos.c===null || pos.r===null){\n                flag = false\n            } else if (t[0]+pos.c >= config.grid || t[0]+pos.c < 0 || t[1]+pos.r >= config.grid || t[1]+pos.r < 0){\n                flag = false\n            } else if (board[t[1]+pos.r][t[0]+pos.c].free===false){\n                flag = false;\n            }\n        })\n        return flag;\n    }\n\n    const setPosition = (pos, val) => {\n        const stn = stones[movingStone]\n        stn.forEach(t => {\n            board[t[1]+pos.r][t[0]+pos.c].free = val;\n        });\n        board.map(a => console.info(a.map(b => b.free ? 1 : 0).join(\",\")))\n    }\n\n    function dragstarted(event) {\n        movingStone = +d3.select(this).attr(\"stn\");\n        if (movingStone !== currentStoneNr){\n            movingStone = null; \n        }\n    }\n    \n    function dragged(event) {\n        if (movingStone===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        moveStone(pos.x, pos.y)\n        drawnStones[movingStone].forEach(m => {\n            pos.x = Math.min(pos.x, m.attr(\"x\"))\n            pos.y = Math.min(pos.y, m.attr(\"y\"))\n        });\n        let check  = checkPosition(pos);\n        drawnStones[movingStone].forEach(m => {\n            m.attr(\"opacity\", check===false ? 0.5 : 1)\n        });\n    }\n    \n    function dragended(event) {\n        if (movingStone===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        let check  = checkPosition(pos);\n\n        if (check===true){\n            setPosition(pos, false)\n            currentStoneNr++;\n            drawStone();\n        } else {\n            pos = snapToGrid(width, height);\n            moveStone(pos.x, pos.y);\n            drawnStones[movingStone].forEach(m => {\n                m.attr(\"opacity\", 1)\n            });\n        }\n    }\n    \n    const drag = d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n\n    d3.select(div).selectAll('*').remove();\n\n    const svg = d3.select(div).append(\"svg\")\n        .attr(\"width\", width + p * 2)\n        .attr(\"height\", (height + p) * 2)\n        .append(\"g\")\n        .attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");\n    \n    const board = d3.range(config.grid).map((r) => \n        d3.range(config.grid).map((c) => \n            ({\n                x: c * (s + p), \n                y: r * (s + p), \n                free: true \n            })));\n\n    let row = svg.selectAll(\".row\")\n        .data(board)\n        .enter().append(\"g\")\n        .attr(\"class\", \"row\");\n\n    row.selectAll(\".square\")\n        .data((d) => d)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"square\")\n        .attr(\"x\", (d) => d.x )\n        .attr(\"y\", (d) => d.y )\n        .attr(\"width\", s )\n        .attr(\"height\", s )\n        .attr(\"rx\", s/10)\n        .attr(\"ry\", s/10)\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#444\");\n    \n    let stones = generateStones(config.stones, Stones.length).map(t => Stones[t].stone)\n    let drawnStones = [];\n    let currentStoneNr = 0, movingStone = 0;\n\n    const drawStone = (x = (width - s) / 2, y = height + s * 2) => {\n        const stn = stones[currentStoneNr];\n        let pieces = []\n        stn.forEach((cell, i) => {\n            let piece = svg.append(\"rect\")\n                .attr(\"class\",\"stn\")\n                .attr(\"stn\", currentStoneNr)\n                .attr(\"x\", cell[0] * (s + p) )\n                .attr(\"y\", cell[1] * (s + p))\n                .attr(\"width\", s )\n                .attr(\"height\", s )\n                .attr(\"rx\", s/10)\n                .attr(\"ry\", s/10)\n                .style(\"fill\", col(stn.length))\n                .style(\"stroke\", \"#000\")\n                .attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\")\n                .call(drag);\n                pieces.push(piece)\n        })\n        drawnStones.push(pieces)\n    }\n\n    const moveStone = (x, y) => {\n        const stn = drawnStones[movingStone];\n        stn.forEach(t => t.attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\"));\n    }\n\n    drawStone();\n    \n}\n\nconst Board = () => {\n    const classes = useStyles();\n    const widgetRef = useRef(null);\n\n    useLayoutEffect(() => {\n        \n        draw(widgetRef.current);\n        \n    });\n\n    return <Box className={classes.board} ref={widgetRef}>\n        \n    </Box>\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}