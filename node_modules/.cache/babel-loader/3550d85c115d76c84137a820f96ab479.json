{"ast":null,"code":"var _jsxFileName = \"/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@material-ui/core';\nimport React, { useRef, useLayoutEffect } from 'react';\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport Items from './Items';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generateTargets = (N = 20, E = Items.length) => {\n  let targets = d3.range(N).map(n => {\n    return Math.floor(Math.random() * E);\n  });\n  return targets;\n};\n\nconst draw = div => {\n  const config = {\n    size: 40,\n    grid: 10,\n    padding: 2\n  };\n  let s = config.size,\n      p = config.padding,\n      width = config.grid * (s + p),\n      height = width;\n\n  const snapToGrid = (x, y) => {\n    let pos = {\n      c: Math.max(0, Math.floor(x / (s + p))),\n      r: Math.max(0, Math.floor(y / (s + p)))\n    };\n\n    if (pos.r >= config.grid) {\n      pos.y = height + s * 2;\n      pos.x = (width - s) / 2;\n      pos.c = pos.r = null;\n    } else {\n      pos.y = Math.min(config.grid - 1, pos.r) * (s + p);\n      pos.x = Math.min(config.grid - 1, pos.c) * (s + p);\n    }\n\n    return pos;\n  };\n\n  const checkPosition = (target, pos) => {\n    let flag = true;\n    target.forEach(t => {\n      if (board[(t[0] + pos.c, t[1] + pos.r)].free === false) {\n        flag = false;\n      }\n    });\n    return flag;\n  };\n\n  function dragstarted() {\n    movingTarget = +d3.select(this).attr(\"target\"); // is it an existing target or a new one ?? \n  }\n\n  function dragged(event) {\n    let pos = snapToGrid(event.x, event.y);\n    moveTarget(pos.x, pos.y);\n    const target = targetGrid[movingTarget];\n    let check = checkPosition(target, pos);\n    d3.select(this).attr(\"opacity\", check === false ? 0.5 : 1); // indicate if the position is available ! \n  }\n\n  function dragended() {// d3.select(this).attr(\"stroke\", null);\n    // const target = drawnTargets[movingTarget];\n    // let avialable = positionTarget(target);\n    // debugger;\n    // // create a new traget only if the last new target was positioned on the board ! \n    // currentTargetNr++;\n    // drawTarget();\n  }\n\n  const drag = d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  d3.select(div).selectAll('*').remove();\n  const svg = d3.select(div).append(\"svg\").attr(\"width\", width + p * 2).attr(\"height\", (height + p) * 2).append(\"g\").attr(\"transform\", \"translate(\" + p + \",\" + p + \")\");\n  const board = d3.range(config.grid).map((r, i) => d3.range(config.grid).map((c, j) => ({\n    x: c * (s + p),\n    y: i * (s + p),\n    free: true\n  })));\n  let row = svg.selectAll(\".row\").data(board).enter().append(\"g\").attr(\"class\", \"row\");\n  let column = row.selectAll(\".square\").data(d => d).enter().append(\"rect\").attr(\"class\", \"square\").attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", \"#fff\").style(\"stroke\", \"#444\");\n  let targetGrid = generateTargets().map(t => Items[t]);\n  let drawnTargets = [];\n  let currentTargetNr = 0,\n      movingTarget = 0;\n\n  const drawTarget = (x = (width - s) / 2, y = height + s * 2) => {\n    const target = targetGrid[currentTargetNr];\n    let items = [];\n    target.forEach((cell, i) => {\n      let item = svg.append(\"rect\").attr(\"class\", \"target\").attr(\"target\", currentTargetNr).attr(\"x\", cell[0] * (s + p)).attr(\"y\", cell[1] * (s + p)).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / 10).attr(\"ry\", s / 10).style(\"fill\", \"#ff7f00\").style(\"stroke\", \"#000\").attr(\"transform\", \"translate(\" + x + \",\" + y + \")\").call(drag);\n      items.push(item);\n    });\n    drawnTargets.push(items);\n  };\n\n  const moveTarget = (x, y) => {\n    const target = drawnTargets[movingTarget];\n    target.forEach(t => t.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\"));\n  };\n\n  drawTarget();\n};\n\nconst Board = () => {\n  _s();\n\n  const classes = useStyles();\n  const widgetRef = useRef(null);\n  useLayoutEffect(() => {\n    draw(widgetRef.current);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.board,\n    ref: widgetRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Board, \"cFDRHWlqjeUjP2b8ZEl5Vn6bhi8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js"],"names":["Box","React","useRef","useLayoutEffect","useStyles","d3","Items","generateTargets","N","E","length","targets","range","map","n","Math","floor","random","draw","div","config","size","grid","padding","s","p","width","height","snapToGrid","x","y","pos","c","max","r","min","checkPosition","target","flag","forEach","t","board","free","dragstarted","movingTarget","select","attr","dragged","event","moveTarget","targetGrid","check","dragended","drag","on","selectAll","remove","svg","append","i","j","row","data","enter","column","d","style","drawnTargets","currentTargetNr","drawTarget","items","cell","item","call","push","Board","classes","widgetRef","current"],"mappings":"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","sourcesContent":["import { Box } from '@material-ui/core'\nimport React, {useRef, useLayoutEffect} from 'react'\n\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport Items from './Items'\n\nconst generateTargets = (N=20, E=Items.length) => {\n    let targets = d3.range(N).map(n => {\n        return Math.floor(Math.random() * E)\n    })\n    return targets\n}\n\nconst draw = (div) => {\n    const config = {\n        size: 40,\n        grid: 10,\n        padding: 2,\n    }\n\n    let s = config.size, p=config.padding, width = config.grid * (s + p), height = width;\n\n    const snapToGrid = (x, y) => {\n        let pos = {\n            c: Math.max(0, Math.floor(x / (s + p))),\n            r: Math.max(0, Math.floor(y / (s + p)))\n        }\n        if (pos.r >= config.grid) {\n            pos.y = height + s * 2\n            pos.x = (width - s) / 2\n            pos.c = pos.r = null;\n        } else {\n            pos.y = Math.min(config.grid-1, pos.r) * (s + p)\n            pos.x = Math.min(config.grid-1, pos.c) * (s + p)\n        }\n        return pos\n    }\n\n    const checkPosition = (target, pos) => {\n        let flag = true;\n        target.forEach(t => {\n            if (board[t[0]+pos.c, t[1]+pos.r].free===false){\n                flag = false;\n            }\n        })\n        return flag;\n    }\n\n    function dragstarted() {\n        movingTarget = +d3.select(this).attr(\"target\");\n        // is it an existing target or a new one ?? \n\n    }\n    \n    function dragged(event) {\n        let pos = snapToGrid(event.x, event.y);\n        moveTarget(pos.x, pos.y)\n        const target = targetGrid[movingTarget];\n        let check  = checkPosition(target, pos);\n        d3.select(this).attr(\"opacity\", check===false ? 0.5 : 1)\n        \n        // indicate if the position is available ! \n    }\n    \n    function dragended() {\n        // d3.select(this).attr(\"stroke\", null);\n        // const target = drawnTargets[movingTarget];\n        // let avialable = positionTarget(target);\n        // debugger;\n        // // create a new traget only if the last new target was positioned on the board ! \n        // currentTargetNr++;\n        // drawTarget();\n    }\n    \n    const drag = d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n\n    d3.select(div).selectAll('*').remove();\n\n    const svg = d3.select(div).append(\"svg\")\n        .attr(\"width\", width + p * 2)\n        .attr(\"height\", (height + p) * 2)\n        .append(\"g\")\n        .attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");\n    \n    const board = d3.range(config.grid).map((r, i) => \n        d3.range(config.grid).map((c, j) => \n            ({\n                x: c * (s + p), \n                y: i * (s + p), \n                free: true \n            })));\n\n    let row = svg.selectAll(\".row\")\n        .data(board)\n        .enter().append(\"g\")\n        .attr(\"class\", \"row\");\n\n    let column = row.selectAll(\".square\")\n        .data((d) => d)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"square\")\n        .attr(\"x\", (d) => d.x )\n        .attr(\"y\", (d) => d.y )\n        .attr(\"width\", s )\n        .attr(\"height\", s )\n        .attr(\"rx\", s/10)\n        .attr(\"ry\", s/10)\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#444\");\n    \n    let targetGrid = generateTargets().map(t => Items[t])\n    let drawnTargets = [];\n    let currentTargetNr = 0, movingTarget = 0;\n\n    const drawTarget = (x = (width - s) / 2, y = height + s * 2) => {\n        const target = targetGrid[currentTargetNr];\n        let items = []\n        target.forEach((cell, i) => {\n            let item = svg.append(\"rect\")\n                .attr(\"class\",\"target\")\n                .attr(\"target\", currentTargetNr)\n                .attr(\"x\", cell[0] * (s + p) )\n                .attr(\"y\", cell[1] * (s + p))\n                .attr(\"width\", s )\n                .attr(\"height\", s )\n                .attr(\"rx\", s/10)\n                .attr(\"ry\", s/10)\n                .style(\"fill\", \"#ff7f00\")\n                .style(\"stroke\", \"#000\")\n                .attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\")\n                .call(drag);\n            items.push(item)\n        })\n        drawnTargets.push(items)\n    }\n\n    const moveTarget = (x, y) => {\n        const target = drawnTargets[movingTarget];\n        target.forEach(t => t.attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\"));\n    }\n\n    drawTarget();\n    \n}\n\nconst Board = () => {\n    const classes = useStyles();\n    const widgetRef = useRef(null);\n\n    useLayoutEffect(() => {\n        \n        draw(widgetRef.current);\n        \n    });\n\n    return <Box className={classes.board} ref={widgetRef}>\n        \n    </Box>\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}