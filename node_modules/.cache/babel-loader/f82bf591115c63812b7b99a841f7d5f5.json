{"ast":null,"code":"var _jsxFileName = \"/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@material-ui/core';\nimport React, { useRef, useLayoutEffect } from 'react';\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst draw = (div, config, handleGameChange) => {\n  let s = config.size,\n      p = config.padding,\n      width = config.grid * (s + p),\n      height = width;\n  let col = d3.scaleOrdinal().range(config.colors);\n  const board = d3.range(config.grid).map(r => d3.range(config.grid).map(c => ({\n    x: c * (s + p),\n    y: r * (s + p),\n    free: true\n  })));\n  let stones = generateStones(config.stones),\n      drawnStones = [],\n      stoneCodes = {},\n      currentStoneNrs = [],\n      stonesLayed = 0,\n      movingStone = 0;\n\n  const checkRowColFull = () => {\n    let fullRow = [],\n        fullColumn = [];\n\n    for (let r = 0; r < config.grid; r++) {\n      let cRow = board[r].every(c => !c.free);\n      let cCol = board.map(b => b[r]).every(c => !c.free);\n\n      if (cRow) {\n        fullRow.push(r);\n      }\n\n      if (cCol) {\n        fullColumn.push(r);\n      }\n    }\n\n    debugger;\n    return {\n      fullRow,\n      fullColumn\n    };\n  };\n\n  const snapToGrid = (x, y) => {\n    let pos = {\n      c: Math.max(0, Math.floor(x / (s + p))),\n      r: Math.max(0, Math.floor(y / (s + p)))\n    };\n\n    if (pos.r >= config.grid) {\n      //TODO: position to the origianl position !  !  !\n      pos.y = height + s * 2;\n      pos.x = (width - s) / 2;\n      pos.c = pos.r = null;\n    } else {\n      pos.y = Math.min(config.grid - 1, pos.r) * (s + p);\n      pos.x = Math.min(config.grid - 1, pos.c) * (s + p);\n    }\n\n    return pos;\n  };\n\n  const checkPositionFree = pos => {\n    const codes = stoneCodes[movingStone];\n    let flag = true;\n    codes.forEach(t => {\n      if (pos.c === null || pos.r === null) {\n        flag = false;\n      } else if (t[0] + pos.c >= config.grid || t[0] + pos.c < 0 || t[1] + pos.r >= config.grid || t[1] + pos.r < 0) {\n        flag = false;\n      } else if (board[t[1] + pos.r][t[0] + pos.c].free === false) {\n        flag = false;\n      }\n    });\n    return flag;\n  };\n\n  const setPosition = (pos, val) => {\n    const codes = stoneCodes[movingStone];\n    codes.forEach(t => {\n      board[t[1] + pos.r][t[0] + pos.c].free = val;\n    });\n  };\n\n  const moveStone = (x, y) => {\n    const stn = drawnStones[movingStone];\n    stn.forEach(t => t.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\"));\n  };\n\n  const drawStone = () => {\n    if (currentStoneNrs.length > 0) {\n      return;\n    }\n\n    stones = generateStones(config.stones);\n    drawnPiecePos = 0;\n\n    for (let i = 0, I = stones.length; i < I; i++) {\n      const stn = stones.shift();\n      stoneCodes[stonesLayed] = stn.stone;\n      let pieces = drawStonePieces(stn.stone, stn.type, stonesLayed);\n      drawnStones.push(pieces);\n      currentStoneNrs.push(stonesLayed);\n      handleGameChange('step', stonesLayed);\n      stonesLayed++;\n    }\n  };\n\n  function dragstarted(event) {\n    movingStone = +d3.select(this).attr(\"stn\");\n\n    if (currentStoneNrs.indexOf(movingStone) < 0) {\n      movingStone = null;\n    }\n  }\n\n  function dragged(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    moveStone(pos.x, pos.y);\n    drawnStones[movingStone].forEach(m => {\n      pos.x = Math.min(pos.x, m.attr(\"x\"));\n      pos.y = Math.min(pos.y, m.attr(\"y\"));\n    });\n    let check = checkPositionFree(pos);\n    drawnStones[movingStone].forEach(m => {\n      m.style(\"fill-opacity\", check === false ? 0.25 : 0.75);\n    });\n  }\n\n  function dragended(event) {\n    if (movingStone === null) {\n      return;\n    }\n\n    let pos = snapToGrid(event.x, event.y);\n    let check = checkPosition(pos);\n\n    if (check === true) {\n      setPosition(pos, false);\n      currentStoneNrs.splice(currentStoneNrs.indexOf(movingStone), 1);\n      checkRowColFull();\n      drawStone();\n    } else {\n      pos = snapToGrid(width, height);\n      moveStone(pos.x, pos.y);\n      drawnStones[movingStone].forEach(m => {\n        m.style(\"fill-opacity\", 0.75);\n      });\n    }\n  }\n\n  const drag = d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n  d3.select(div).selectAll('*').remove();\n  const svg = d3.select(div).append(\"svg\").attr(\"width\", width + p * 2).attr(\"height\", (height + p) * 2).append(\"g\").attr(\"transform\", \"translate(\" + p + \",\" + p + \")\");\n  let row = svg.selectAll(\".row\").data(board).enter().append(\"g\").attr(\"class\", \"row\");\n  row.selectAll(\".square\").data(d => d).enter().append(\"rect\").attr(\"class\", \"board\").attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / config.size).attr(\"ry\", s / config.size).style(\"fill\", \"#fff\").style(\"stroke\", \"#a2a2a2\");\n  let drawnPiecePos = 0;\n\n  const drawStonePieces = (stn, color, index) => {\n    let pieces = [];\n    let stoneWidth = d3.max(stn.map(s => s[0]));\n    let stonePosY = height + s * 2;\n    let stonePosX = drawnPiecePos * (s + p);\n\n    if (stonePosX > width - stoneWidth * (s + p)) {\n      stonePosY = height + s * 4;\n      stonePosX = width / 2;\n    }\n\n    stn.forEach(cell => {\n      let piece = svg.append(\"rect\").attr(\"class\", \"stn\").attr(\"stn\", index).attr(\"row\", cell[1]).attr(\"col\", cell[0]).attr(\"x\", cell[0] * (s + p)).attr(\"y\", cell[1] * (s + p)).attr(\"width\", s).attr(\"height\", s).attr(\"rx\", s / config.size).attr(\"ry\", s / config.size).style(\"fill\", col(color)).style(\"fill-opacity\", 0.75).style(\"stroke\", \"#000\").attr(\"transform\", \"translate(\" + (stonePosX + 2) + \",\" + stonePosY + \")\").call(drag);\n      pieces.push(piece);\n    });\n    drawnPiecePos += stoneWidth + 2;\n    return pieces;\n  };\n\n  drawStone();\n};\n\nconst Board = ({\n  config,\n  game,\n  handleChange\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const widgetRef = useRef(null);\n\n  const handleGameChange = (key, value) => {\n    handleChange(key, value);\n  };\n\n  useLayoutEffect(() => {\n    if (!game || game.step > 1 || game.round > 1) {\n      return;\n    }\n\n    draw(widgetRef.current, config, handleGameChange);\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.board,\n    ref: widgetRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Board, \"cFDRHWlqjeUjP2b8ZEl5Vn6bhi8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/peterbak/Documents/GitHub/game1010/game1010/src/widgets/Board.js"],"names":["Box","React","useRef","useLayoutEffect","useStyles","d3","generateStones","draw","div","config","handleGameChange","s","size","p","padding","width","grid","height","col","scaleOrdinal","range","colors","board","map","r","c","x","y","free","stones","drawnStones","stoneCodes","currentStoneNrs","stonesLayed","movingStone","checkRowColFull","fullRow","fullColumn","cRow","every","cCol","b","push","snapToGrid","pos","Math","max","floor","min","checkPositionFree","codes","flag","forEach","t","setPosition","val","moveStone","stn","attr","drawStone","length","drawnPiecePos","i","I","shift","stone","pieces","drawStonePieces","type","dragstarted","event","select","indexOf","dragged","m","check","style","dragended","checkPosition","splice","drag","on","selectAll","remove","svg","append","row","data","enter","d","color","index","stoneWidth","stonePosY","stonePosX","cell","piece","call","Board","game","handleChange","classes","widgetRef","key","value","step","round","current"],"mappings":"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","sourcesContent":["import { Box } from '@material-ui/core'\nimport React, {useRef, useLayoutEffect} from 'react'\n\nimport useStyles from '../style';\nimport * as d3 from 'd3';\nimport { generateStones } from './Stones'\n\nconst draw = (div, config, handleGameChange) => {\n    \n    let s = config.size, p=config.padding, width = config.grid * (s + p), height = width;\n    let col = d3.scaleOrdinal().range(config.colors);\n\n    const board = d3.range(config.grid).map((r) => \n        d3.range(config.grid).map((c) => \n            ({\n                x: c * (s + p), \n                y: r * (s + p), \n                free: true \n            })));\n\n    let stones = generateStones(config.stones), \n        drawnStones = [], \n        stoneCodes = {},\n        currentStoneNrs = [], \n        stonesLayed = 0, \n        movingStone = 0;\n\n    const checkRowColFull = () => {\n        let fullRow = [], fullColumn = [];\n        for (let r = 0; r < config.grid; r++){\n            let cRow = board[r].every(c=>!c.free);\n            let cCol = board.map(b => b[r]).every(c=>!c.free);\n            if (cRow) {\n                fullRow.push(r);\n            }\n            if (cCol) {\n                fullColumn.push(r);\n            }\n        }\n        debugger;\n        return {fullRow, fullColumn};\n    }\n        \n    const snapToGrid = (x, y) => {\n        let pos = {\n            c: Math.max(0, Math.floor(x / (s + p))),\n            r: Math.max(0, Math.floor(y / (s + p)))\n        }\n        if (pos.r >= config.grid) {\n            //TODO: position to the origianl position !  !  !\n            pos.y = height + s * 2\n            pos.x = (width - s) / 2\n            pos.c = pos.r = null;\n        } else {\n            pos.y = Math.min(config.grid-1, pos.r) * (s + p)\n            pos.x = Math.min(config.grid-1, pos.c) * (s + p)\n        }\n        return pos\n    }\n\n    const checkPositionFree = (pos) => {\n        const codes = stoneCodes[movingStone];\n        let flag = true;\n        codes.forEach(t => {\n            if (pos.c===null || pos.r===null){\n                flag = false\n            } else if (t[0]+pos.c >= config.grid || t[0]+pos.c < 0 || t[1]+pos.r >= config.grid || t[1]+pos.r < 0){\n                flag = false\n            } else if (board[t[1]+pos.r][t[0]+pos.c].free===false){\n                flag = false;\n            }\n        })\n        return flag;\n    }\n\n    const setPosition = (pos, val) => {\n        const codes = stoneCodes[movingStone]\n        codes.forEach(t => {\n            board[t[1]+pos.r][t[0]+pos.c].free = val;\n        });\n    }\n\n    const moveStone = (x, y) => {\n        const stn = drawnStones[movingStone];\n        stn.forEach(t => t.attr(\"transform\",\"translate(\"+(x)+\",\"+(y)+\")\"));\n    }\n \n    const drawStone = () => {\n        if (currentStoneNrs.length>0){ return }\n\n        stones = generateStones(config.stones);\n        drawnPiecePos = 0;\n        for (let i = 0, I = stones.length; i < I; i++){\n            const stn = stones.shift();\n            stoneCodes[stonesLayed] = stn.stone;\n            let pieces = drawStonePieces(stn.stone, stn.type, stonesLayed);\n            drawnStones.push(pieces);\n            currentStoneNrs.push(stonesLayed);\n            handleGameChange('step', stonesLayed);\n            stonesLayed++;\n        }\n    }\n\n    function dragstarted(event) {\n        movingStone = +d3.select(this).attr(\"stn\");\n        if (currentStoneNrs.indexOf(movingStone) < 0){ \n            movingStone = null; \n        }\n    }\n    \n    function dragged(event) {\n        if (movingStone===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        moveStone(pos.x, pos.y)\n        drawnStones[movingStone].forEach(m => {\n            pos.x = Math.min(pos.x, m.attr(\"x\"))\n            pos.y = Math.min(pos.y, m.attr(\"y\"))\n        });\n        let check  = checkPositionFree(pos);\n        drawnStones[movingStone].forEach(m => {\n            m.style(\"fill-opacity\", check===false ? 0.25 : 0.75)\n        });\n    }\n    \n    function dragended(event) {\n        if (movingStone===null){return;}\n        let pos = snapToGrid(event.x, event.y);\n        let check  = checkPosition(pos);\n\n        if (check===true){\n            setPosition(pos, false)\n            currentStoneNrs.splice(currentStoneNrs.indexOf(movingStone), 1);\n            checkRowColFull();\n            drawStone();\n        } else {\n            pos = snapToGrid(width, height);\n            moveStone(pos.x, pos.y);\n            drawnStones[movingStone].forEach(m => {\n                m.style(\"fill-opacity\", 0.75)\n            });\n        }\n    }\n    \n    const drag = d3.drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n\n    d3.select(div).selectAll('*').remove();\n\n    const svg = d3.select(div).append(\"svg\")\n        .attr(\"width\", width + p * 2)\n        .attr(\"height\", (height + p) * 2)\n        .append(\"g\")\n        .attr(\"transform\",\"translate(\"+p+\",\"+p+\")\");\n\n    let row = svg.selectAll(\".row\")\n        .data(board)\n        .enter().append(\"g\")\n        .attr(\"class\", \"row\");\n\n    row.selectAll(\".square\")\n        .data((d) => d)\n        .enter().append(\"rect\")\n        .attr(\"class\",\"board\")\n        .attr(\"x\", (d) => d.x )\n        .attr(\"y\", (d) => d.y )\n        .attr(\"width\", s )\n        .attr(\"height\", s )\n        .attr(\"rx\", s/config.size)\n        .attr(\"ry\", s/config.size)\n        .style(\"fill\", \"#fff\")\n        .style(\"stroke\", \"#a2a2a2\");\n    \n    let drawnPiecePos = 0;\n    const drawStonePieces  = (stn, color, index) => {\n        let pieces = []\n        let stoneWidth = d3.max(stn.map(s => s[0]));\n        let stonePosY = height + s * 2\n        let stonePosX = drawnPiecePos * (s + p);\n        if (stonePosX > width - stoneWidth * (s+p)){\n            stonePosY = height + s * 4\n            stonePosX = width / 2\n        }\n        stn.forEach((cell) => {\n            let piece = svg.append(\"rect\")\n                .attr(\"class\",\"stn\")\n                .attr(\"stn\", index)\n                .attr(\"row\", cell[1])\n                .attr(\"col\", cell[0])\n                .attr(\"x\", cell[0] * (s + p) )\n                .attr(\"y\", cell[1] * (s + p))\n                .attr(\"width\", s )\n                .attr(\"height\", s )\n                .attr(\"rx\", s/config.size)\n                .attr(\"ry\", s/config.size)\n                .style(\"fill\", col(color))\n                .style(\"fill-opacity\", 0.75)\n                .style(\"stroke\", \"#000\")\n                .attr(\"transform\",\"translate(\"+(stonePosX + 2)+\",\"+(stonePosY)+\")\")\n                .call(drag);\n            pieces.push(piece)\n        })\n        drawnPiecePos += stoneWidth + 2;\n        return pieces;\n    }\n\n    drawStone();\n    \n}\n\nconst Board = ({config, game, handleChange}) => {\n    const classes = useStyles();\n    const widgetRef = useRef(null);\n\n    const handleGameChange = (key, value) => {\n        handleChange(key, value);\n    }\n\n    useLayoutEffect(() => {\n        if (!game || game.step > 1 || game.round > 1){ return; }\n        draw(widgetRef.current, config, handleGameChange);\n    });\n\n    return <Box className={classes.board} ref={widgetRef}></Box>\n\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}